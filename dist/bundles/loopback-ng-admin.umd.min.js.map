{
  "version": 3,
  "file": "loopback-ng-admin.umd.min.js",
  "sources": [
    "ng://loopback-ng-admin/out/src/app/guards/api-logued.guard.ts",
    "ng://loopback-ng-admin/out/src/app/loopback-ng-admin.module.ts",
    "ng://loopback-ng-admin/out/src/app/controllers/impl/loopback-api-loader/loopback-api-loader.component.ts",
    "ng://loopback-ng-admin/out/src/app/controllers/impl/loopback-api-item-editor/loopback-api-item-editor.component.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/custom/Admin.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/base.service.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/sockets/socket.connections.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/sockets/socket.driver.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/search.params.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/lb.config.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/custom/SDKModels.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/models/Admin.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/models/BaseModels.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/storage/storage.swaps.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/auth.service.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/error.service.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/models/User.ts",
    "ng://loopback-ng-admin/node_modules/tslib/tslib.es6.js",
    "ng://loopback-ng-admin/out/src/app/components/api-table/api-table.component.ts",
    "ng://loopback-ng-admin/out/src/app/components/api-table/api-row/api-row.component.ts",
    "ng://loopback-ng-admin/out/src/app/components/model-form/model-form.component.ts",
    "ng://loopback-ng-admin/out/src/app/components/paginator/paginator.component.ts",
    "ng://loopback-ng-admin/out/src/app/pipes/capitalize.pipe.ts",
    "ng://loopback-ng-admin/out/src/app/components/model-search/model-search.component.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { LoopBackAuth, AdminApi } from '../sdk';\n\n@Injectable()\nexport class ApiLoguedGuard implements CanActivate {\n\n  static valid = false;\n  constructor(private auth: LoopBackAuth, private userApi: AdminApi) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n    if (!ApiLoguedGuard.valid) {\n      const user = this.auth.getCurrentUserData();\n      const token = this.auth.getToken();\n      return this.userApi.getCurrent().toPromise().then(user => {\n        ApiLoguedGuard.valid = true;\n        return true;\n      }, err => {\n        return false;\n      });\n    }\n    else {\n      return true;\n    }\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ApiTableComponent } from './components/api-table/api-table.component';\nimport { ApiRowComponent } from './components/api-table/api-row/api-row.component';\nimport { ModelFormComponent } from './components/model-form/model-form.component';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { PaginatorComponent } from './components/paginator/paginator.component';\nimport { CapitalizePipe } from './pipes/capitalize.pipe';\nimport { ModelSearchComponent } from './components/model-search/model-search.component';\nimport { ApiLoguedGuard } from './guards/api-logued.guard';\nimport { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';\n\n\nconst declarations = [\n  ModelFormComponent,\n  ApiRowComponent,\n  ApiTableComponent,\n  PaginatorComponent, CapitalizePipe, ModelSearchComponent\n\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    FroalaEditorModule.forRoot(), FroalaViewModule.forRoot()\n  ],\n  declarations: [...declarations],\n  providers: [ApiLoguedGuard],\n  exports: [...declarations]\n})\nexport class LoopbackNgAdminModule { }\n",
    "import { Component, OnInit, Inject, forwardRef } from '@angular/core';\nimport { GenericApiLoader } from '../../generic-api-loader.';\nimport { BaseLoopBackApi, SDKModels, User } from '../../../sdk';\n\n\nexport interface LoaderSearch {\n  property: string;\n  value: string;\n  properties?: [string];\n}\n\nexport class LoopbackApiLoaderComponent<Model, ModelApi extends BaseLoopBackApi> implements GenericApiLoader {\n  static sdkModels = null;\n  loaderConfig = {\n    page: 0,\n    limit: 15,\n    order: 'date'\n  };\n\n  public className = '';\n\n  protected loaderPage = this.loaderConfig.page;\n\n  loaderItems: [Model];\n\n  loaderCount = 0;\n\n  protected loaderSearch: LoaderSearch = { property: '', value: '' };\n\n  loaderItemModel = User;\n\n  modelProperties = {};\n  modelDefinition = User.getModelDefinition();\n\n  baseRoute = '/dashboard';\n\n  createRoute = '/dashboard/topics/create';\n  editRoute = '/dashboard/topics';\n\n  apiRoute = '';\n\n  constructor(protected loaderApi: ModelApi) {\n    this.loadModels();\n    this.loadModel();\n    this.loadRoutes();\n  }\n\n  private loadModels() {\n    if (!LoopbackApiLoaderComponent.sdkModels) {\n      LoopbackApiLoaderComponent.sdkModels = new SDKModels();\n    }\n  }\n\n  private loadRoutes() {\n    this.apiRoute = this.modelDefinition.path.toLowerCase();\n\n    this.editRoute = `${this.baseRoute}/${this.apiRoute}`;\n    this.createRoute = `${this.editRoute}/create`;\n  }\n\n  private loadModel() {\n    this.loaderItemModel = LoopbackApiLoaderComponent.sdkModels.get(this.loaderApi.getModelName());\n\n\n    this.modelDefinition = this.loaderItemModel.getModelDefinition();\n\n    this.modelProperties = this.modelDefinition.properties;\n\n  }\n\n  private getFilter() {\n    const filter = { limit: this.loaderConfig.limit, skip: this.loaderConfig.limit * this.loaderPage };\n\n    if (this.loaderSearch) {\n      const search = this.loaderSearch;\n      const name = search.property;\n      if (search.property !== 'any') {\n        filter['where'] = {};\n        filter['where'][name] = { 'like': search.value, options: 'i' };\n      } else {\n        filter['where'] = this.getWhereAny(search.properties, search.value);\n      }\n    }\n\n    return filter;\n  }\n\n  getWhereAny(properties, value) {\n    const where = { or: [] };\n    for (let i in properties) {\n      const name = properties[i];\n      const type = this.modelProperties[name].type;\n      if (type != 'Date') {\n        var item = {};\n        item[name] = { 'like': value, options: 'i' };\n        where.or.push(item);\n      }\n    }\n    return where;\n\n  }\n\n\n  loadData() {\n    this.loaderApi.find(this.getFilter()).toPromise().then(\n      (items: [Model]) => {\n        this.loaderItems = items;\n      }\n    );\n\n    this.loaderApi.count().toPromise().then(\n      count => this.loaderCount = count.count\n    ).catch(this.handleError);\n  }\n\n\n  apiSearch($event) {\n    this.loaderSearch = $event;\n    this.loadData();\n  }\n\n\n  handleError(error) {\n    alert(error.message ? error.message : error);\n  }\n\n  nextPage() {\n    this.loaderPage++;\n    this.loadData();\n  }\n\n  prevPage() {\n    this.loaderPage--;\n    this.loadData();\n  }\n\n\n}\n",
    "import { Component, OnInit } from '@angular/core';\nimport { GenericApiItemEditor } from '../../generic-api-item-editor.';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { BaseLoopBackApi } from '../../../sdk';\n\nexport class LoopbackApiItemEditorComponent<Model, ModelApi extends BaseLoopBackApi> implements GenericApiItemEditor {\n\n  public item: Model;\n  public className;\n  protected selectedId;\n\n  public formProperties;\n\n  backRoute;\n  baseRoute = '/dashboard';\n\n  constructor(protected api: ModelApi, protected route: ActivatedRoute) {\n    const model = this.api.getModel();\n    this.item = new model();\n    this.className = this.item.constructor.name;\n    const constr: any = this.item.constructor;\n    this.backRoute = `${this.baseRoute}/${constr.getModelDefinition().path.toLowerCase()}`;\n  }\n\n  loadParams() {\n    this.route.params.subscribe(params => {\n      if (params.id) {\n        this.selectedId = params.id;\n        this.loadData();\n      }\n    });\n\n  }\n\n  loadData() {\n    return this.api.findById(this.selectedId).toPromise().then(\n      (item: Model) => this.item = item\n    ).catch(this.handleError);\n  }\n\n  protected handleError(error) {\n    alert(error.message);\n  }\n\n\n  createItem() {\n    return this.api.create(this.item).toPromise().catch(this.handleError);\n  }\n\n  editItem() {\n    return this.api.upsert(this.item).toPromise().catch(this.handleError);\n  }\n\n  onSubmit($event) {\n    this.item = $event;\n    let promise: any = this.api.create(this.item).toPromise();\n    if (this.item['id']) {\n      promise = this.api.upsert(this.item).toPromise();\n    }\n\n    promise.then((item: Model) => {\n      this.item = item;\n      alert('Element modified');\n    }).catch(this.handleError);\n  }\n\n  removeItem() {\n    const resp = confirm(\"Are you sure you want to remove?\")\n    if (!resp)\n      return;\n    this.api.deleteById(this.item['id']).toPromise().then(\n      item => { alert('item removed'); window.history.back() },\n      this.handleError\n    );\n  }\n\n}\n",
    "/* tslint:disable */\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { SDKModels } from './SDKModels';\r\nimport { BaseLoopBackApi } from '../core/base.service';\r\nimport { LoopBackConfig } from '../../lb.config';\r\nimport { LoopBackAuth } from '../core/auth.service';\r\nimport { LoopBackFilter, SDKToken, AccessToken } from '../../models/BaseModels';\r\nimport { JSONSearchParams } from '../core/search.params';\r\nimport { ErrorHandler } from '../core/error.service';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { Admin } from '../../models/Admin';\r\nimport { SocketConnection } from '../../sockets/socket.connections';\r\n\r\n\r\n/**\r\n * Api services for the `Admin` model.\r\n */\r\n@Injectable()\r\nexport class AdminApi extends BaseLoopBackApi {\r\n\r\n  constructor(\r\n    @Inject(Http) protected http: Http,\r\n    @Inject(SocketConnection) protected connection: SocketConnection,\r\n    @Inject(SDKModels) protected models: SDKModels,\r\n    @Inject(LoopBackAuth) protected auth: LoopBackAuth,\r\n    @Inject(JSONSearchParams) protected searchParams: JSONSearchParams,\r\n    @Optional() @Inject(ErrorHandler) protected errorHandler: ErrorHandler\r\n  ) {\r\n    super(http,  connection,  models, auth, searchParams, errorHandler);\r\n  }\r\n\r\n  /**\r\n   * Find a related item by id for accessTokens.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  fk Foreign key for accessTokens\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public findByIdAccessTokens(id: any, fk: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens/:fk\";\r\n    let _routeParams: any = {\r\n      id: id,\r\n      fk: fk\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete a related item by id for accessTokens.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  fk Foreign key for accessTokens\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public destroyByIdAccessTokens(id: any, fk: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"DELETE\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens/:fk\";\r\n    let _routeParams: any = {\r\n      id: id,\r\n      fk: fk\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Update a related item by id for accessTokens.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  fk Foreign key for accessTokens\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public updateByIdAccessTokens(id: any, fk: any, data: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"PUT\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens/:fk\";\r\n    let _routeParams: any = {\r\n      id: id,\r\n      fk: fk\r\n    };\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Queries accessTokens of Admin.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  filter \r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public getAccessTokens(id: any, filter: LoopBackFilter = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    if (typeof filter !== 'undefined' && filter !== null) _urlParams.filter = filter;\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance in accessTokens of this model.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public createAccessTokens(id: any, data: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Deletes all accessTokens of this model.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public deleteAccessTokens(id: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"DELETE\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Counts accessTokens of Admin.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  where Criteria to match model instances\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * Data properties:\r\n   *\r\n   *  - `count` – `{number}` - \r\n   */\r\n  public countAccessTokens(id: any, where: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens/count\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    if (typeof where !== 'undefined' && where !== null) _urlParams.where = where;\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Patch an existing model instance or insert a new one into the data source.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   *  - `data` – `{object}` - Model instance data\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public patchOrCreate(data: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"PATCH\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Patch attributes for a model instance and persist it into the data source.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  data Request data.\r\n   *\r\n   *  - `data` – `{object}` - An object of model property name/value pairs\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public patchAttributes(id: any, data: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"PATCH\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Login a user with username/email and password.\r\n   *\r\n   * @param include Related objects to include in the response. See the description of return value for more details.\r\n   *   Default value: `user`.\r\n   *\r\n   *  - `rememberMe` - `boolean` - Whether the authentication credentials\r\n   *     should be remembered in localStorage across app/browser restarts.\r\n   *     Default: `true`.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * El cuerpo de respuesta contiene propiedades de la AccessToken creada durante el inicio de la sesión.\r\n   * Dependiendo del valor del parámetro `include`, el cuerpo puede contener propiedades adicionales:\r\n   * \r\n   *   - `user` - `U+007BUserU+007D` - Datos del usuario conectado actualmente. (`include=user`)\r\n   * \r\n   *\r\n   */\r\n  public login(credentials: any, include: any = 'user', rememberMe: boolean = true, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/login\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      credentials: credentials\r\n    };\r\n    let _urlParams: any = {};\r\n    if (typeof include !== 'undefined' && include !== null) _urlParams.include = include;\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders)\r\n      .map(\r\n        (response: any) => {\r\n          response.ttl = parseInt(response.ttl);\r\n          response.rememberMe = rememberMe;\r\n          this.auth.setToken(response);\r\n          return response;\r\n        }\r\n      );\r\n      return result;\r\n      \r\n  }\r\n\r\n  /**\r\n   * Logout a user with access token.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method does not accept any data. Supply an empty object.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public logout(customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/logout\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n       _urlParams.access_token = this.auth.getAccessTokenId();\r\n    this.auth.clear(); \r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Trigger user's identity verification with configured verifyOptions\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method does not accept any data. Supply an empty object.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public verify(id: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/verify\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Confirm a user registration with identity verification token.\r\n   *\r\n   * @param uid \r\n   *\r\n   * @param token \r\n   *\r\n   * @param redirect \r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public confirm(uid: any, token: any, redirect: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/confirm\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    if (typeof uid !== 'undefined' && uid !== null) _urlParams.uid = uid;\r\n    if (typeof token !== 'undefined' && token !== null) _urlParams.token = token;\r\n    if (typeof redirect !== 'undefined' && redirect !== null) _urlParams.redirect = redirect;\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Reset password for a user with email.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public resetPassword(options: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/reset\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      options: options\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Change a user's password.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   *  - `oldPassword` – `{string}` - \r\n   *\r\n   *  - `newPassword` – `{string}` - \r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public changePassword(oldPassword: any, newPassword: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/change-password\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      data: {\r\n        oldPassword: oldPassword,\r\n        newPassword: newPassword\r\n      }\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Reset user's password via a password-reset token.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   *  - `newPassword` – `{string}` - \r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public setPassword(newPassword: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/reset-password\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      data: {\r\n        newPassword: newPassword\r\n      }\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance in accessTokens of this model.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns  An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public createManyAccessTokens(id: any, data: any[] = [], customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n  /**\r\n   * @ngdoc method\r\n   * @name sdk.Admin#getCurrent\r\n   * @methodOf sdk.Admin\r\n   *\r\n   * @description\r\n   *\r\n   * Get data of the currently logged user. Fail with HTTP result 401\r\n   * when there is no user logged in.\r\n   *\r\n   * @returns object An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   */\r\n  public getCurrent(filter: LoopBackFilter = {}): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Admins\" + \"/:id\";\r\n    let id: any = this.auth.getCurrentUserId();\r\n    if (id == null)\r\n    id = '__anonymous__';\r\n    let _routeParams: any = { id: id };\r\n    let _urlParams: any = {};\r\n    let _postBody: any = {};\r\n    if (filter) _urlParams.filter = filter;\r\n    return this.request(_method, _url, _routeParams, _urlParams, _postBody);\r\n  }\r\n  /**\r\n   * Get data of the currently logged user that was returned by the last\r\n   * call to {@link sdk.Admin#login} or\r\n   * {@link sdk.Admin#getCurrent}. Return null when there\r\n   * is no user logged in or the data of the current user were not fetched\r\n   * yet.\r\n   *\r\n   * @returns object An Account instance.\r\n   */\r\n  public getCachedCurrent() {\r\n    return this.auth.getCurrentUserData();\r\n  }\r\n  /**\r\n   * Get data of the currently logged access tokern that was returned by the last\r\n   * call to {@link sdk.Admin#login}\r\n   *\r\n   * @returns object An AccessToken instance.\r\n   */\r\n  public getCurrentToken(): AccessToken {\r\n    return this.auth.getToken();\r\n  }\r\n  /**\r\n   * @name sdk.Admin#isAuthenticated\r\n   *\r\n   */\r\n  public isAuthenticated() {\r\n    return !(this.getCurrentId() === '' || this.getCurrentId() == null || this.getCurrentId() == 'null');\r\n  }\r\n\r\n  /**\r\n   * @name sdk.Admin#getCurrentId\r\n   *\r\n   * @returns object Id of the currently logged-in user or null.\r\n   */\r\n  public getCurrentId() {\r\n    return this.auth.getCurrentUserId();\r\n  }\r\n\r\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `Admin`.\r\n   */\r\n  public getModelName() {\r\n    return \"Admin\";\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Http, Headers, Request, RequestOptions } from '@angular/http';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { JSONSearchParams } from './search.params';\r\nimport { ErrorHandler } from './error.service';\r\nimport { LoopBackAuth } from './auth.service';\r\nimport { LoopBackConfig } from '../../lb.config';\r\nimport { LoopBackFilter, AccessToken } from '../../models/BaseModels';\r\nimport { SDKModels } from '../custom/SDKModels';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport { SocketConnection } from '../../sockets/socket.connections';\r\n// Making Sure EventSource Type is available to avoid compilation issues.\r\ndeclare var EventSource: any;\r\n/**\r\n* @module BaseLoopBackApi\r\n* @author Jonathan Casarrubias <@johncasarrubias> <github:jonathan-casarrubias>\r\n* @author Nikolay Matiushenkov <https://github.com/mnvx>\r\n* @license MIT\r\n* @description\r\n* Abstract class that will be implemented in every custom service automatically built\r\n* by the sdk builder.\r\n* It provides the core functionallity for every API call, either by HTTP Calls or by\r\n* WebSockets.\r\n**/\r\n@Injectable()\r\nexport abstract class BaseLoopBackApi {\r\n\r\n  protected path: string;\r\n  protected model: any;\r\n\r\n  constructor(\r\n    @Inject(Http) protected http: Http,\r\n    @Inject(SocketConnection) protected connection: SocketConnection,\r\n    @Inject(SDKModels) protected models: SDKModels,\r\n    @Inject(LoopBackAuth) protected auth: LoopBackAuth,\r\n    @Inject(JSONSearchParams) protected searchParams: JSONSearchParams,\r\n    @Optional() @Inject(ErrorHandler) protected errorHandler: ErrorHandler\r\n  ) {\r\n    this.model = this.models.get(this.getModelName());\r\n  }\r\n\r\n  getModel() {\r\n    return this.model;\r\n  }\r\n\r\n  /**\r\n   * @method request\r\n   * @param  method      Request method (GET, POST, PUT)\r\n   * @param  url         Request url (my-host/my-url/:id)\r\n   * @param     routeParams Values of url parameters\r\n   * @param     urlParams   Parameters for building url (filter and other)\r\n   * @param     postBody    Request postBody\r\n   * @return\r\n   * @description\r\n   * This is a core method, every HTTP Call will be done from here, every API Service will\r\n   * extend this class and use this method to get RESTful communication.\r\n   **/\r\n  public request(\r\n    method: string,\r\n    url: string,\r\n    routeParams: any = {},\r\n    urlParams: any = {},\r\n    postBody: any = {},\r\n    pubsub: boolean = false,\r\n    customHeaders?: Function\r\n  ): Observable<any> {\r\n    // Transpile route variables to the actual request Values\r\n    Object.keys(routeParams).forEach((key: string) => {\r\n      url = url.replace(new RegExp(\":\" + key + \"(\\/|$)\", \"g\"), routeParams[key] + \"$1\")\r\n    });\r\n    if (pubsub) {\r\n      if (url.match(/fk/)) {\r\n        let arr = url.split('/'); arr.pop();\r\n        url = arr.join('/');\r\n      }\r\n      let event: string = (`[${method}]${url}`).replace(/\\?/, '');\r\n      let subject: Subject<any> = new Subject<any>();\r\n      this.connection.on(event, (res: any) => subject.next(res));\r\n      return subject.asObservable();\r\n    } else {\r\n      // Headers to be sent\r\n      let headers: Headers = new Headers();\r\n      headers.append('Content-Type', 'application/json');\r\n      // Authenticate request\r\n      this.authenticate(url, headers);\r\n      // Body fix for built in remote methods using \"data\", \"options\" or \"credentials\r\n      // that are the actual body, Custom remote method properties are different and need\r\n      // to be wrapped into a body object\r\n      let body: any;\r\n      let postBodyKeys = typeof postBody === 'object' ? Object.keys(postBody) : []\r\n      if (postBodyKeys.length === 1) {\r\n        body = postBody[postBodyKeys.shift()];\r\n      } else {\r\n        body = postBody;\r\n      }\r\n      let filter: string = '';\r\n      // Separate filter object from url params and add to search query\r\n      if (urlParams.filter) {\r\n        if (LoopBackConfig.isHeadersFilteringSet()) {\r\n          headers.append('filter', JSON.stringify(urlParams.filter));\r\n        } else {\r\n          filter = `?filter=${encodeURIComponent(JSON.stringify(urlParams.filter))}`;\r\n        }\r\n        delete urlParams.filter;\r\n      }\r\n      // Separate where object from url params and add to search query\r\n      /**\r\n      CODE BELOW WILL GENERATE THE FOLLOWING ISSUES:\r\n      - https://github.com/mean-expert-official/loopback-sdk-builder/issues/356\r\n      - https://github.com/mean-expert-official/loopback-sdk-builder/issues/328 \r\n      if (urlParams.where) {\r\n        headers.append('where', JSON.stringify(urlParams.where));\r\n        delete urlParams.where;\r\n      }\r\n      **/\r\n      if (typeof customHeaders === 'function') {\r\n        headers = customHeaders(headers);\r\n      }\r\n      this.searchParams.setJSON(urlParams);\r\n      let request: Request = new Request(\r\n        new RequestOptions({\r\n          headers: headers,\r\n          method: method,\r\n          url: `${url}${filter}`,\r\n          search: Object.keys(urlParams).length > 0 ? this.searchParams.getURLSearchParams() : null,\r\n          body: body ? JSON.stringify(body) : undefined,\r\n          withCredentials: LoopBackConfig.getRequestOptionsCredentials()\r\n        })\r\n      );\r\n      return this.http.request(request)\r\n        .map((res: any) => (res.text() != \"\" ? res.json() : {}))\r\n        .catch((e) => this.errorHandler.handleError(e));\r\n    }\r\n  }\r\n  /**\r\n   * @method authenticate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param url Server URL\r\n   * @param headers HTTP Headers\r\n   * @return\r\n   * @description\r\n   * This method will try to authenticate using either an access_token or basic http auth\r\n   */\r\n  public authenticate<T>(url: string, headers: Headers): void {\r\n    if (this.auth.getAccessTokenId()) {\r\n      headers.append(\r\n        'Authorization',\r\n        LoopBackConfig.getAuthPrefix() + this.auth.getAccessTokenId()\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * @method create\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type\r\n   * @return\r\n   * @description\r\n   * Generic create method\r\n   */\r\n  public create<T>(data: T, customHeaders?: Function): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onCreate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type array\r\n   * @return\r\n   * @description\r\n   * Generic pubsub oncreate many method\r\n   */\r\n  public onCreate<T>(data: T[]): Observable<T[]> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, undefined, { data }, true)\r\n      .map((datum: T[]) => datum.map((data: T) => this.model.factory(data)));\r\n  }\r\n  /**\r\n   * @method createMany\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type array\r\n   * @return\r\n   * @description\r\n   * Generic create many method\r\n   */\r\n  public createMany<T>(data: T[], customHeaders?: Function): Observable<T[]> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders)\r\n      .map((datum: T[]) => datum.map((data: T) => this.model.factory(data)));\r\n  }\r\n  /**\r\n   * @method onCreateMany\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type array\r\n   * @return\r\n   * @description\r\n   * Generic create many method\r\n   */\r\n  public onCreateMany<T>(data: T[]): Observable<T[]> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, undefined, { data }, true)\r\n      .map((datum: T[]) => datum.map((data: T) => this.model.factory(data)));\r\n  }\r\n  /**\r\n   * @method findById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type\r\n   * @return\r\n   * @description\r\n   * Generic findById method\r\n   */\r\n  public findById<T>(id: any, filter: LoopBackFilter = {}, customHeaders?: Function): Observable<T> {\r\n    let _urlParams: any = {};\r\n    if (filter) _urlParams.filter = filter;\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, _urlParams, undefined, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method find\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic find method\r\n   */\r\n  public find<T>(filter: LoopBackFilter = {}, customHeaders?: Function): Observable<T[]> {\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, { filter }, undefined, null, customHeaders)\r\n      .map((datum: T[]) => datum.map((data: T) => this.model.factory(data)));\r\n  }\r\n  /**\r\n   * @method exists\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic exists method\r\n   */\r\n  public exists<T>(id: any, customHeaders?: Function): Observable<T> {\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id/exists'\r\n    ].join('/'), { id }, undefined, undefined, null, customHeaders);\r\n  }\r\n  /**\r\n   * @method findOne\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic findOne method\r\n   */\r\n  public findOne<T>(filter: LoopBackFilter = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'findOne'\r\n    ].join('/'), undefined, { filter }, undefined, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method updateAll\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic updateAll method\r\n   */\r\n  public updateAll<T>(where: any = {}, data: T, customHeaders?: Function): Observable<{ count: 'number' }> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'update'\r\n    ].join('/'), undefined, _urlParams, { data }, null, customHeaders);\r\n  }\r\n  /**\r\n   * @method onUpdateAll\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onUpdateAll method\r\n   */\r\n  public onUpdateAll<T>(where: any = {}, data: T): Observable<{ count: 'number' }> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'update'\r\n    ].join('/'), undefined, _urlParams, { data }, true);\r\n  }\r\n  /**\r\n   * @method deleteById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic deleteById method\r\n   */\r\n  public deleteById<T>(id: any, customHeaders?: Function): Observable<T> {\r\n    return this.request('DELETE', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, undefined, undefined, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onDeleteById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onDeleteById method\r\n   */\r\n  public onDeleteById<T>(id: any): Observable<T> {\r\n    return this.request('DELETE', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, undefined, undefined, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method count\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic count method\r\n   */\r\n  public count(where: any = {}, customHeaders?: Function): Observable<{ count: number }> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'count'\r\n    ].join('/'), undefined, _urlParams, undefined, null, customHeaders);\r\n  }\r\n  /**\r\n   * @method updateAttributes\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic updateAttributes method\r\n   */\r\n  public updateAttributes<T>(id: any, data: T, customHeaders?: Function): Observable<T> {\r\n    return this.request('PUT', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onUpdateAttributes\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic onUpdateAttributes method\r\n   */\r\n  public onUpdateAttributes<T>(id: any, data: T): Observable<T> {\r\n    return this.request('PUT', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method upsert\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic upsert method\r\n   */\r\n  public upsert<T>(data: any = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('PUT', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onUpsert\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onUpsert method\r\n   */\r\n  public onUpsert<T>(data: any = {}): Observable<T> {\r\n    return this.request('PUT', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n    ].join('/'), undefined, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method upsertPatch\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic upsert method using patch http method\r\n   */\r\n  public upsertPatch<T>(data: any = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('PATCH', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onUpsertPatch\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onUpsertPatch method using patch http method\r\n   */\r\n  public onUpsertPatch<T>(data: any = {}): Observable<T> {\r\n    return this.request('PATCH', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n    ].join('/'), undefined, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method upsertWithWhere\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic upsertWithWhere method\r\n   */\r\n  public upsertWithWhere<T>(where: any = {}, data: any = {}, customHeaders?: Function): Observable<T> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'upsertWithWhere'\r\n    ].join('/'), undefined, _urlParams, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onUpsertWithWhere\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onUpsertWithWhere method\r\n   */\r\n  public onUpsertWithWhere<T>(where: any = {}, data: any = {}): Observable<T> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'upsertWithWhere'\r\n    ].join('/'), undefined, _urlParams, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method replaceOrCreate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic replaceOrCreate method\r\n   */\r\n  public replaceOrCreate<T>(data: any = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'replaceOrCreate'\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onReplaceOrCreate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic onReplaceOrCreate method\r\n   */\r\n  public onReplaceOrCreate<T>(data: any = {}): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'replaceOrCreate'\r\n    ].join('/'), undefined, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method replaceById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic replaceById method\r\n   */\r\n  public replaceById<T>(id: any, data: any = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id', 'replace'\r\n    ].join('/'), { id }, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onReplaceById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic onReplaceById method\r\n   */\r\n  public onReplaceById<T>(id: any, data: any = {}): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id', 'replace'\r\n    ].join('/'), { id }, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method createChangeStream\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic createChangeStream method\r\n   */\r\n  public createChangeStream(): Observable<any> {\r\n    let subject = new Subject();\r\n    if (typeof EventSource !== 'undefined') {\r\n      let emit = (msg: any) => subject.next(JSON.parse(msg.data));\r\n      var source = new EventSource([\r\n        LoopBackConfig.getPath(),\r\n        LoopBackConfig.getApiVersion(),\r\n        this.model.getModelDefinition().path,\r\n        'change-stream'\r\n      ].join('/'));\r\n      source.addEventListener('data', emit);\r\n      source.onerror = emit;\r\n    } else {\r\n      console.warn('SDK Builder: EventSource is not supported');\r\n    }\r\n    return subject.asObservable();\r\n  }\r\n  /**\r\n   * @method getModelName\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Abstract getModelName method\r\n   */\r\n  abstract getModelName(): string;\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable, Inject, NgZone } from '@angular/core';\r\nimport { SocketDriver } from './socket.driver';\r\nimport { AccessToken } from '../models';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/share';\r\nimport { LoopBackConfig } from '../lb.config';\r\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\r\n* @module SocketConnection\r\n* @license MIT\r\n* @description\r\n* This module handle socket connections and return singleton instances for each\r\n* connection, it will use the SDK Socket Driver Available currently supporting\r\n* Angular 2 for web, NativeScript 2 and Angular Universal.\r\n**/\r\n@Injectable()\r\nexport class SocketConnection {\r\n  private socket: any;\r\n  private subjects: {\r\n    onConnect: Subject<any>,\r\n    onDisconnect: Subject<any>,\r\n    onAuthenticated: Subject<any>,\r\n    onUnAuthorized: Subject<any>\r\n  } = {\r\n    onConnect: new Subject(),\r\n    onDisconnect: new Subject(),\r\n    onAuthenticated: new Subject(),\r\n    onUnAuthorized: new Subject()\r\n  };\r\n  public sharedObservables: {\r\n    sharedOnConnect?: Observable<any>,\r\n    sharedOnDisconnect?: Observable<any>,\r\n    sharedOnAuthenticated?: Observable<any>,\r\n    sharedOnUnAuthorized?: Observable<any>\r\n  } = {};\r\n  public authenticated: boolean = false;\r\n  /**\r\n   * @method constructor\r\n   * @param driver Socket IO Driver\r\n   * @param zone Angular 2 Zone\r\n   * @description\r\n   * The constructor will set references for the shared hot observables from\r\n   * the class subjects. Then it will subscribe each of these observables\r\n   * that will create a channel that later will be shared between subscribers.\r\n   **/\r\n  constructor(\r\n    @Inject(SocketDriver) private driver: SocketDriver,\r\n    @Inject(NgZone) private zone: NgZone\r\n  ) {\r\n    this.sharedObservables = {\r\n      sharedOnConnect: this.subjects.onConnect.asObservable().share(),\r\n      sharedOnDisconnect: this.subjects.onDisconnect.asObservable().share(),\r\n      sharedOnAuthenticated: this.subjects.onAuthenticated.asObservable().share(),\r\n      sharedOnUnAuthorized: this.subjects.onUnAuthorized.asObservable().share()\r\n    };\r\n    // This is needed to create the first channel, subsequents will share the connection\r\n    // We are using Hot Observables to avoid duplicating connection status events.\r\n    this.sharedObservables.sharedOnConnect.subscribe();\r\n    this.sharedObservables.sharedOnDisconnect.subscribe();\r\n    this.sharedObservables.sharedOnAuthenticated.subscribe();\r\n    this.sharedObservables.sharedOnUnAuthorized.subscribe();\r\n  }\r\n  /**\r\n   * @method connect\r\n   * @param token AccesToken instance\r\n   * @return\r\n   * @description\r\n   * This method will create a new socket connection when not previously established.\r\n   * If there is a broken connection it will re-connect.\r\n   **/\r\n  public connect(token: AccessToken = null): void {\r\n    if (!this.socket) {\r\n      console.info('Creating a new connection with: ', LoopBackConfig.getPath());\r\n      // Create new socket connection\r\n      this.socket = this.driver.connect(LoopBackConfig.getPath(), {\r\n        log: false,\r\n        secure: LoopBackConfig.isSecureWebSocketsSet(),\r\n        forceNew: true,\r\n        forceWebsockets: true,\r\n        transports: ['websocket']\r\n      });\r\n      // Listen for connection\r\n      this.on('connect', () => {\r\n        this.subjects.onConnect.next('connected');\r\n        // Authenticate or start heartbeat now    \r\n        this.emit('authentication', token);\r\n      });\r\n      // Listen for authentication\r\n      this.on('authenticated', () => {\r\n        this.authenticated = true;\r\n        this.subjects.onAuthenticated.next();\r\n        this.heartbeater();\r\n      })\r\n      // Listen for authentication\r\n      this.on('unauthorized', (err: any) => {\r\n        this.authenticated = false;\r\n        this.subjects.onUnAuthorized.next(err);\r\n      })\r\n      // Listen for disconnections\r\n      this.on('disconnect', (status: any) => this.subjects.onDisconnect.next(status));\r\n    } else if (this.socket && !this.socket.connected){\r\n      if (typeof this.socket.off === 'function') {\r\n        this.socket.off();\r\n      }\r\n      if (typeof this.socket.destroy === 'function') {\r\n        this.socket.destroy();\r\n      }\r\n      delete this.socket;\r\n      this.connect(token);\r\n    }\r\n  }\r\n  /**\r\n   * @method isConnected\r\n   * @return\r\n   * @description\r\n   * This method will return true or false depending on established connections\r\n   **/\r\n  public isConnected(): boolean {\r\n    return (this.socket && this.socket.connected);\r\n  }\r\n  /**\r\n   * @method on\r\n   * @param event Event name\r\n   * @param handler Event listener handler\r\n   * @return\r\n   * @description\r\n   * This method listen for server events from the current WebSocket connection.\r\n   * This method is a facade that will wrap the original \"on\" method and run it\r\n   * within the Angular Zone to avoid update issues.\r\n   **/\r\n  public on(event: string, handler: Function): void {\r\n    this.socket.on(event, (data: any) => this.zone.run(() => handler(data)));\r\n  }\r\n  /**\r\n   * @method emit\r\n   * @param event Event name\r\n   * @param data Any type of data\r\n   * @return\r\n   * @description\r\n   * This method will send any type of data to the server according the event set.\r\n   **/\r\n  public emit(event: string, data?: any): void {\r\n    if (data) {\r\n      this.socket.emit(event, data);\r\n    } else {\r\n      this.socket.emit(event);\r\n    }\r\n  }\r\n  /**\r\n   * @method removeListener\r\n   * @param event Event name\r\n   * @param handler Event listener handler\r\n   * @return\r\n   * @description\r\n   * This method will wrap the original \"on\" method and run it within the Angular Zone\r\n   * Note: off is being used since the nativescript socket io client does not provide\r\n   * removeListener method, but only provides with off which is provided in any platform.\r\n   **/\r\n  public removeListener(event: string, handler: Function): void {\r\n    if (typeof this.socket.off === 'function') {\r\n      this.socket.off(event, handler);\r\n    }\r\n  }\r\n  /**\r\n   * @method removeAllListeners\r\n   * @param event Event name\r\n   * @param handler Event listener handler\r\n   * @return\r\n   * @description\r\n   * This method will wrap the original \"on\" method and run it within the Angular Zone\r\n   * Note: off is being used since the nativescript socket io client does not provide\r\n   * removeListener method, but only provides with off which is provided in any platform.\r\n   **/\r\n  public removeAllListeners(event: string): void {\r\n    if (typeof this.socket.removeAllListeners === 'function') {\r\n      this.socket.removeAllListeners(event);\r\n    }\r\n  }\r\n  /**\r\n   * @method disconnect\r\n   * @return\r\n   * @description\r\n   * This will disconnect the client from the server\r\n   **/\r\n  public disconnect(): void {\r\n    this.socket.disconnect();\r\n  }\r\n  /**\r\n   * @method heartbeater\r\n   * @return\r\n   * @description\r\n   * This will keep the connection as active, even when users are not sending\r\n   * data, this avoids disconnection because of a connection not being used.\r\n   **/\r\n  private heartbeater(): void {\r\n    let heartbeater: any = setInterval(() => {\r\n      if (this.isConnected()) {\r\n        this.socket.emit('lb-ping');\r\n      } else {\r\n        this.socket.removeAllListeners('lb-pong');\r\n        clearInterval(heartbeater);\r\n      }\r\n    }, 15000);\r\n    this.socket.on('lb-pong', (data: any) => console.info('Heartbeat: ', data));\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n/**\r\n * @module SocketDriver\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * The SocketDriver class is used for dependency injection swapping.\r\n * It will be provided using factory method from different sources.\r\n **/\r\nexport class SocketDriver {\r\n  connect(url: any, options: any) {}\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { URLSearchParams } from '@angular/http';\r\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\r\n* @module JSONSearchParams\r\n* @license MIT\r\n* @description\r\n* JSON Parser and Wrapper for the Angular2 URLSearchParams\r\n* This module correctly encodes a json object into a query string and then creates\r\n* an instance of the URLSearchParams component for later use in HTTP Calls\r\n**/\r\n@Injectable()\r\nexport class JSONSearchParams {\r\n\r\n    private _usp: URLSearchParams;\r\n\r\n    public setJSON(obj: any) {\r\n        this._usp = new URLSearchParams(this._JSON2URL(obj, false));\r\n    }\r\n\r\n    public getURLSearchParams(): URLSearchParams {\r\n        return this._usp;\r\n    }\r\n\r\n    private _JSON2URL(obj: any, parent: any) {\r\n        var parts: any = [];\r\n        for (var key in obj)\r\n        parts.push(this._parseParam(key, obj[key], parent));\r\n        return parts.join('&');\r\n    }\r\n\r\n    private _parseParam(key: string, value: any, parent: string) {\r\n        let processedKey = parent ? parent + '[' + key + ']' : key;\r\n        if (value && (<string>(typeof value) === 'object' || Array.isArray(value))) {\r\n            return this._JSON2URL(value, processedKey);\r\n        }\r\n        return processedKey + '=' + value;\r\n    }\r\n}\r\n",
    "/* tslint:disable */\r\n/**\r\n* @module LoopBackConfig\r\n* @description\r\n*\r\n* The LoopBackConfig module help developers to externally \r\n* configure the base url and api version for loopback.io\r\n*\r\n* Example\r\n*\r\n* import { LoopBackConfig } from './sdk';\r\n* \r\n* @Component() // No metadata needed for this module\r\n*\r\n* export class MyApp {\r\n*   constructor() {\r\n*     LoopBackConfig.setBaseURL('http://localhost:3000');\r\n*     LoopBackConfig.setApiVersion('api');\r\n*   }\r\n* }\r\n**/\r\nexport class LoopBackConfig {\r\n  private static path: string = '//0.0.0.0:3000';\r\n  private static version: string | number = 'api';\r\n  private static authPrefix: string = '';\r\n  private static debug: boolean = true;\r\n  private static filterOn: string = 'headers';\r\n  private static secure: boolean = false;\r\n  private static withCredentials: boolean = false;\r\n\r\n  public static setApiVersion(version: string = 'api'): void {\r\n    LoopBackConfig.version = version;\r\n  }\r\n  \r\n  public static getApiVersion(): string | number {\r\n    return LoopBackConfig.version;\r\n  }\r\n\r\n  public static setBaseURL(url: string = '/'): void {\r\n    LoopBackConfig.path = url;\r\n  }\r\n  \r\n  public static getPath(): string {\r\n    return LoopBackConfig.path;\r\n  }\r\n\r\n  public static setAuthPrefix(authPrefix: string = ''): void {\r\n    LoopBackConfig.authPrefix = authPrefix;\r\n  }\r\n\r\n  public static getAuthPrefix(): string {\r\n    return LoopBackConfig.authPrefix;\r\n  }\r\n\r\n  public static setDebugMode(isEnabled: boolean): void {\r\n    LoopBackConfig.debug = isEnabled;\r\n  }\r\n\r\n  public static debuggable(): boolean {\r\n    return LoopBackConfig.debug;\r\n  }\r\n\r\n  public static filterOnUrl(): void {\r\n    LoopBackConfig.filterOn = 'url';\r\n  }\r\n\r\n  public static filterOnHeaders(): void {\r\n    LoopBackConfig.filterOn = 'headers';\r\n  }\r\n\r\n  public static isHeadersFilteringSet(): boolean {\r\n    return (LoopBackConfig.filterOn === 'headers');\r\n  }\r\n\r\n  public static setSecureWebSockets(): void {\r\n    LoopBackConfig.secure = true;\r\n  }\r\n\r\n  public static unsetSecureWebSockets(): void {\r\n    LoopBackConfig.secure = false;\r\n  }\r\n\r\n  public static isSecureWebSocketsSet(): boolean {\r\n    return LoopBackConfig.secure;\r\n  }\r\n\r\n  public static setRequestOptionsCredentials(withCredentials: boolean = false): void {\r\n    LoopBackConfig.withCredentials = withCredentials;\r\n  }\r\n\r\n  public static getRequestOptionsCredentials(): boolean {\r\n    return LoopBackConfig.withCredentials;\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { User } from '../../models/User';\r\nimport { Admin } from '../../models/Admin';\r\n\r\nexport interface Models { [name: string]: any }\r\n\r\n@Injectable()\r\nexport class SDKModels {\r\n\r\n  private models: Models = {\r\n    User: User,\r\n    Admin: Admin\r\n  };\r\n\r\n  public get(modelName: string): any {\r\n    return this.models[modelName];\r\n  }\r\n\r\n  public getAll(): Models {\r\n    return this.models;\r\n  }\r\n\r\n  public getModelNames(): string[] {\r\n    return Object.keys(this.models);\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n\r\ndeclare var Object: any;\r\nexport interface AdminInterface {\r\n  \"realm\"?: string;\r\n  \"username\"?: string;\r\n  \"email\": string;\r\n  \"emailVerified\"?: boolean;\r\n  \"id\"?: any;\r\n  \"password\"?: string;\r\n  accessTokens?: any[];\r\n}\r\n\r\nexport class Admin implements AdminInterface {\r\n  \"realm\": string;\r\n  \"username\": string;\r\n  \"email\": string;\r\n  \"emailVerified\": boolean;\r\n  \"id\": any;\r\n  \"password\": string;\r\n  accessTokens: any[];\r\n  constructor(data?: AdminInterface) {\r\n    Object.assign(this, data);\r\n  }\r\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `Admin`.\r\n   */\r\n  public static getModelName() {\r\n    return \"Admin\";\r\n  }\r\n  /**\r\n  * @method factory\r\n  * @author Jonathan Casarrubias\r\n  * @license MIT\r\n  * This method creates an instance of Admin for dynamic purposes.\r\n  **/\r\n  public static factory(data: AdminInterface): Admin{\r\n    return new Admin(data);\r\n  }\r\n  /**\r\n  * @method getModelDefinition\r\n  * @author Julien Ledun\r\n  * @license MIT\r\n  * This method returns an object that represents some of the model\r\n  * definitions.\r\n  **/\r\n  public static getModelDefinition() {\r\n    return {\r\n      name: 'Admin',\r\n      plural: 'Admins',\r\n      path: 'Admins',\r\n      idName: 'id',\r\n      properties: {\r\n        \"realm\": {\r\n          name: 'realm',\r\n          type: 'string'\r\n        },\r\n        \"username\": {\r\n          name: 'username',\r\n          type: 'string'\r\n        },\r\n        \"email\": {\r\n          name: 'email',\r\n          type: 'string'\r\n        },\r\n        \"emailVerified\": {\r\n          name: 'emailVerified',\r\n          type: 'boolean'\r\n        },\r\n        \"id\": {\r\n          name: 'id',\r\n          type: 'any'\r\n        },\r\n        \"password\": {\r\n          name: 'password',\r\n          type: 'string'\r\n        },\r\n      },\r\n      relations: {\r\n        accessTokens: {\r\n          name: 'accessTokens',\r\n          type: 'any[]',\r\n          model: '',\r\n          relationType: 'hasMany',\r\n                  keyFrom: 'id',\r\n          keyTo: 'userId'\r\n        },\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n\r\n\r\n\r\ndeclare var Object: any;\r\nexport interface LoopBackFilter {\r\n  fields?: any;\r\n  include?: any;\r\n  limit?: any;\r\n  order?: any;\r\n  skip?: any;\r\n  offset?: any;\r\n  where?: any;\r\n}\r\n\r\nexport interface AccessTokenInterface {\r\n  \"id\"?: string;\r\n  \"ttl\"?: number;\r\n  \"scopes\"?: [\"string\"];\r\n  \"created\"?: Date;\r\n  \"userId\"?: string;\r\n  \"user\"?: any;\r\n}\r\n\r\nexport class AccessToken implements AccessTokenInterface {\r\n  \"id\": string;\r\n  \"ttl\": number;\r\n  \"scopes\": [\"string\"];\r\n  \"created\": Date;\r\n  \"userId\": string;\r\n  \"user\": any;\r\n  constructor(data?: AccessTokenInterface) {\r\n    Object.assign(this, data);\r\n  }\r\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `AccessToken`.\r\n   */\r\n  public static getModelName() {\r\n    return \"AccessToken\";\r\n  }\r\n  /**\r\n  * @method factory\r\n  * @author Jonathan Casarrubias\r\n  * @license MIT\r\n  * This method creates an instance of AccessToken for dynamic purposes.\r\n  **/\r\n  public static factory(data: AccessTokenInterface): AccessToken{\r\n    return new AccessToken(data);\r\n  }  \r\n  /**\r\n  * @method getModelDefinition\r\n  * @author Julien Ledun\r\n  * @license MIT\r\n  * This method returns an object that represents some of the model\r\n  * definitions.\r\n  **/\r\n  public static getModelDefinition() {\r\n    return {\r\n      name: 'AccessToken',\r\n      plural: 'AccessTokens',\r\n      properties: {\r\n        \"id\": {\r\n          name: 'id',\r\n          type: 'string'\r\n        },\r\n        \"ttl\": {\r\n          name: 'ttl',\r\n          type: 'number',\r\n          default: 1209600\r\n        },\r\n        \"scopes\": {\r\n          name: 'scopes',\r\n          type: '[\"string\"]'\r\n        },\r\n        \"created\": {\r\n          name: 'created',\r\n          type: 'Date'\r\n        },\r\n        \"userId\": {\r\n          name: 'userId',\r\n          type: 'string'\r\n        },\r\n      },\r\n      relations: {\r\n        user: {\r\n          name: 'user',\r\n          type: 'User',\r\n          model: 'User'\r\n        },\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class SDKToken implements AccessTokenInterface {\r\n  id: any = null;\r\n  ttl: number = null;\r\n  scopes: any = null;\r\n  created: any = null;\r\n  userId: any = null;\r\n  user: any = null;\r\n  rememberMe: boolean = null;\r\n  constructor(data?: AccessTokenInterface) {\r\n    Object.assign(this, data);\r\n  }\r\n}\r\n/**\r\n* This GeoPoint represents both, LoopBack and MongoDB GeoPoint\r\n**/\r\nexport interface GeoPoint  {\r\n    lat?: number;\r\n    lng?: number;\r\n    type?: string;\r\n    coordinates?: number[];\r\n}\r\n\r\nexport interface StatFilter {\r\n    range: string,\r\n    custom?: {\r\n      start: string,\r\n      end: string\r\n    },\r\n    where?: {},\r\n    groupBy?: string\r\n}\r\n",
    "/* tslint:disable */\r\n/**\r\n * @module Storage\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * The InternalStorage class is used for dependency injection swapping.\r\n * It will be provided using factory method from different sources.\r\n **/\r\nexport class BaseStorage {\r\n  /**\r\n   * @method get\r\n   * @param  key Storage key name\r\n   * @return\r\n   * @description\r\n   * The getter will return any type of data persisted in storage.\r\n   **/\r\n  get(key: string): any {}\r\n  /**\r\n   * @method set\r\n   * @param  key Storage key name\r\n   * @param value Any value\r\n   * @return\r\n   * @description\r\n   * The setter will return any type of data persisted in localStorage.\r\n   **/\r\n  set(key: string, value: any, expires?: Date): void {}\r\n  /**\r\n   * @method remove\r\n   * @param key Storage key name\r\n   * @return\r\n   * @description\r\n   * This method will remove a localStorage item from the client.\r\n   **/\r\n  remove(key: string): void {}\r\n}\r\n/**\r\n * @module InternalStorage\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * The InternalStorage class is used for dependency injection swapping.\r\n * It will be provided using factory method from different sources.\r\n * This is mainly required because Angular Universal integration.\r\n * It does inject a CookieStorage instead of LocalStorage.\r\n **/\r\nexport class InternalStorage extends BaseStorage {}\r\n/**\r\n * @module SDKStorage\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * The SDKStorage class is used for dependency injection swapping.\r\n * It will be provided using factory method according the right environment.\r\n * This is created for public usage, to allow persisting custom data\r\n * Into the local storage API.\r\n **/\r\nexport class SDKStorage extends BaseStorage {}\r\n",
    "/* tslint:disable */\r\ndeclare var Object: any;\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { InternalStorage } from '../../storage/storage.swaps';\r\nimport { SDKToken } from '../../models/BaseModels';\r\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\r\n* @module SocketConnection\r\n* @license MIT\r\n* @description\r\n* This module handle socket connections and return singleton instances for each\r\n* connection, it will use the SDK Socket Driver Available currently supporting\r\n* Angular 2 for web, NativeScript 2 and Angular Universal.\r\n**/\r\n@Injectable()\r\nexport class LoopBackAuth {\r\n  /**\r\n   * \r\n   **/\r\n  private token: SDKToken = new SDKToken();\r\n  /**\r\n   * \r\n   **/\r\n  protected prefix: string = '$LoopBackSDK$';\r\n  /**\r\n   * @method constructor\r\n   * @param storage Internal Storage Driver\r\n   * @description\r\n   * The constructor will initialize the token loading data from storage\r\n   **/\r\n  constructor(@Inject(InternalStorage) protected storage: InternalStorage) {\r\n    this.token.id = this.load('id');\r\n    this.token.user = this.load('user');\r\n    this.token.userId = this.load('userId');\r\n    this.token.created = this.load('created');\r\n    this.token.ttl = this.load('ttl');\r\n    this.token.rememberMe = this.load('rememberMe');\r\n  }\r\n  /**\r\n   * @method setRememberMe\r\n   * @param value Flag to remember credentials\r\n   * @return\r\n   * @description\r\n   * This method will set a flag in order to remember the current credentials\r\n   **/\r\n  public setRememberMe(value: boolean): void {\r\n    this.token.rememberMe = value;\r\n  }\r\n  /**\r\n   * @method setUser\r\n   * @param user Any type of user model\r\n   * @return\r\n   * @description\r\n   * This method will update the user information and persist it if the\r\n   * rememberMe flag is set.\r\n   **/\r\n  public setUser(user: any) {\r\n    this.token.user = user;\r\n    this.save();\r\n  }\r\n  /**\r\n   * @method setToken\r\n   * @param token SDKToken or casted AccessToken instance\r\n   * @return\r\n   * @description\r\n   * This method will set a flag in order to remember the current credentials\r\n   **/\r\n  public setToken(token: SDKToken): void {\r\n    this.token = Object.assign({}, this.token, token);\r\n    this.save();\r\n  }\r\n  /**\r\n   * @method getToken\r\n   * @return\r\n   * @description\r\n   * This method will set a flag in order to remember the current credentials.\r\n   **/\r\n  public getToken(): SDKToken {\r\n    return <SDKToken>this.token;\r\n  }\r\n  /**\r\n   * @method getAccessTokenId\r\n   * @return\r\n   * @description\r\n   * This method will return the actual token string, not the object instance.\r\n   **/\r\n  public getAccessTokenId(): string {\r\n    return this.token.id;\r\n  }\r\n  /**\r\n   * @method getCurrentUserId\r\n   * @return\r\n   * @description\r\n   * This method will return the current user id, it can be number or string.\r\n   **/\r\n  public getCurrentUserId(): any {\r\n    return this.token.userId;\r\n  }\r\n  /**\r\n   * @method getCurrentUserData\r\n   * @return\r\n   * @description\r\n   * This method will return the current user instance.\r\n   **/\r\n  public getCurrentUserData(): any {\r\n    return (typeof this.token.user === 'string') ? JSON.parse(this.token.user) : this.token.user;\r\n  }\r\n  /**\r\n   * @method save\r\n   * @return Whether or not the information was saved\r\n   * @description\r\n   * This method will save in either local storage or cookies the current credentials.\r\n   * But only if rememberMe is enabled.\r\n   **/\r\n  public save(): boolean {\r\n      let today = new Date();\r\n      let expires = new Date(today.getTime() + (this.token.ttl * 1000));\r\n      this.persist('id', this.token.id, expires);\r\n      this.persist('user', this.token.user, expires);\r\n      this.persist('userId', this.token.userId, expires);\r\n      this.persist('created', this.token.created, expires);\r\n      this.persist('ttl', this.token.ttl, expires);\r\n      this.persist('rememberMe', this.token.rememberMe, expires);\r\n      return true;\r\n  };\r\n  /**\r\n   * @method load\r\n   * @param prop Property name\r\n   * @return Any information persisted in storage\r\n   * @description\r\n   * This method will load either from local storage or cookies the provided property.\r\n   **/\r\n  protected load(prop: string): any {\r\n    return this.storage.get(`${this.prefix}${prop}`);\r\n  }\r\n  /**\r\n   * @method clear\r\n   * @return\r\n   * @description\r\n   * This method will clear cookies or the local storage.\r\n   **/\r\n  public clear(): void {\r\n    Object.keys(this.token).forEach((prop: string) => this.storage.remove(`${this.prefix}${prop}`));\r\n    this.token = new SDKToken();\r\n  }\r\n  /**\r\n   * @method persist\r\n   * @return\r\n   * @description\r\n   * This method saves values to storage\r\n   **/\r\n  protected persist(prop: string, value: any, expires?: Date): void {\r\n    try {\r\n      this.storage.set(\r\n        `${this.prefix}${prop}`,\r\n        (typeof value === 'object') ? JSON.stringify(value) : value,\r\n        this.token.rememberMe?expires:null\r\n      );\r\n    }\r\n    catch (err) {\r\n      console.error('Cannot access local/session storage:', err);\r\n    }\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\n//import { ErrorObservable } from 'rxjs/observable/ErrorObservable';\r\nimport 'rxjs/add/observable/throw';\r\n/**\r\n * Default error handler\r\n */\r\n@Injectable()\r\nexport class ErrorHandler {\r\n  // ErrorObservable when rxjs version < rc.5\r\n  // ErrorObservable<string> when rxjs version = rc.5\r\n  // I'm leaving any for now to avoid breaking apps using both versions\r\n  public handleError(error: Response): any {\r\n    return Observable.throw(error.json().error || 'Server error');\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n\r\ndeclare var Object: any;\r\nexport interface UserInterface {\r\n  \"realm\"?: string;\r\n  \"username\"?: string;\r\n  \"email\": string;\r\n  \"emailVerified\"?: boolean;\r\n  \"id\"?: any;\r\n  \"password\"?: string;\r\n  accessTokens?: any[];\r\n}\r\n\r\nexport class User implements UserInterface {\r\n  \"realm\": string;\r\n  \"username\": string;\r\n  \"email\": string;\r\n  \"emailVerified\": boolean;\r\n  \"id\": any;\r\n  \"password\": string;\r\n  accessTokens: any[];\r\n  constructor(data?: UserInterface) {\r\n    Object.assign(this, data);\r\n  }\r\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `User`.\r\n   */\r\n  public static getModelName() {\r\n    return \"User\";\r\n  }\r\n  /**\r\n  * @method factory\r\n  * @author Jonathan Casarrubias\r\n  * @license MIT\r\n  * This method creates an instance of User for dynamic purposes.\r\n  **/\r\n  public static factory(data: UserInterface): User{\r\n    return new User(data);\r\n  }\r\n  /**\r\n  * @method getModelDefinition\r\n  * @author Julien Ledun\r\n  * @license MIT\r\n  * This method returns an object that represents some of the model\r\n  * definitions.\r\n  **/\r\n  public static getModelDefinition() {\r\n    return {\r\n      name: 'User',\r\n      plural: 'Users',\r\n      path: 'Users',\r\n      idName: 'id',\r\n      properties: {\r\n        \"realm\": {\r\n          name: 'realm',\r\n          type: 'string'\r\n        },\r\n        \"username\": {\r\n          name: 'username',\r\n          type: 'string'\r\n        },\r\n        \"email\": {\r\n          name: 'email',\r\n          type: 'string'\r\n        },\r\n        \"emailVerified\": {\r\n          name: 'emailVerified',\r\n          type: 'boolean'\r\n        },\r\n        \"id\": {\r\n          name: 'id',\r\n          type: 'any'\r\n        },\r\n        \"password\": {\r\n          name: 'password',\r\n          type: 'string'\r\n        },\r\n      },\r\n      relations: {\r\n        accessTokens: {\r\n          name: 'accessTokens',\r\n          type: 'any[]',\r\n          model: '',\r\n          relationType: 'hasMany',\r\n                  keyFrom: 'id',\r\n          keyTo: 'userId'\r\n        },\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-api-table',\r\n  template: `<table class=\"table table-hover table-sm\">\r\n  <thead>\r\n    <tr>\r\n      <th *ngFor=\"let item of tableProperties\" class=\"text-capitalize\" scope=\"col\"> {{item.name}}</th>\r\n    </tr>\r\n  </thead>\r\n\r\n  <tbody>\r\n    <tr [routerLink]=\"[route, item.id]\" app-api-row *ngFor=\"let item of tableItems\" [rowItem]=\"item\" [tableProperties]=\"tableProperties\">\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class ApiTableComponent implements OnInit {\r\n\r\n  @Input()\r\n  tableItems: [any];\r\n\r\n  tableModel;\r\n\r\n  @Input()\r\n  properties;\r\n\r\n  tableProperties = [];\r\n\r\n  @Input()\r\n  route;\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.tableModel = this.tableItems ? this.tableItems[0] : {};\r\n    if (!this.properties) {\r\n      this.readPropertiesDefault();\r\n    } else {\r\n      this.readArrProperties();\r\n    }\r\n  }\r\n\r\n\r\n  readArrProperties() {\r\n    const props = this.getProps();\r\n    for (var i in props) {\r\n      if (this.properties.includes(i)) {\r\n        this.tableProperties.push(props[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  getProps() {\r\n    return this.tableModel.constructor.getModelDefinition().properties;\r\n  }\r\n\r\n\r\n  readPropertiesDefault() {\r\n    this.tableProperties = [];\r\n    const props = this.getProps();\r\n    for (var i in props) {\r\n      this.tableProperties.push(props[i]);\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: '[app-api-row]',\n  template: `<td *ngFor=\"let prop of tableProperties\" >\n\n  <div [ngSwitch]=\"prop.name.toLowerCase()\">\n    <span *ngSwitchCase=\"'date'\">\n      {{rowItem[prop.name] | date}}\n    </span>\n\n    <span *ngSwitchDefault>\n      {{rowItem[prop.name]}}\n    </span>\n  </div>\n</td>\n\n<td>\n\n</td>\n`,\n  styles: [``]\n})\nexport class ApiRowComponent implements OnInit {\n\n  @Input()\n  rowItem;\n\n  @Input()\n  tableProperties;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\ninterface ModelProperty {\n  name: String;\n  type: String;\n}\n\n\n@Component({\n  selector: 'app-model-form',\n  template: `<div class=\"container\">\n  <ng-content select=\"[header]\"></ng-content>\n  <hr>\n\n  <form (ngSubmit)=\"submitted()\">\n    <ng-content select=\"[formTop]\"></ng-content>\n    <div class=\"form-group row\" *ngFor=\"let element of formProperties\">\n      <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">{{element.name}}</label>\n      <div class=\"col-sm-10\" [ngSwitch]=\"element.type\" *ngIf=\"element.name !='id'; else idInput\">\n        <input type=\"checkbox\" class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" *ngSwitchCase=\"'boolean'\">\n        <input type=\"email\" class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" *ngSwitchCase=\"'email'\">\n        <textarea class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" *ngSwitchCase=\"'textarea'\">\n        </textarea>\n        <div [froalaEditor] *ngSwitchCase=\"'rtext'\" [(froalaModel)]=\"item[element.name]\">\n          {{item[element.name]}}\n        </div>\n        <input type=\"text\" class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" *ngSwitchDefault>\n      </div>\n      <ng-template #idInput>\n        <div class=\"col-sm-10\">\n          <input type=\"text\" class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" readonly>\n        </div>\n      </ng-template>\n      <ng-content select=\"[form]\"></ng-content>\n    </div>\n    <div class=\"form-group row\">\n      <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n      <ng-content select=\"[buttons]\"></ng-content>\n    </div>\n  </form>\n</div>\n`,\n  styles: [``]\n})\nexport class ModelFormComponent implements OnInit {\n\n  private item;\n\n  @Input()\n  properties;\n\n  @Input()\n  public formProperties = [];\n\n  @Input()\n  private name;\n\n  @Output() onSubmit = new EventEmitter<any>();\n\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  @Input()\n  set model(item) {\n    this.item = item;\n    if (!this.formProperties || this.formProperties.length === 0) {\n      this.formProperties = [];\n      if (!this.properties || this.properties.length === 0) {\n        this.loadParamsFromModel();\n      } else {\n        this.loadParamsProperties();\n      }\n    }\n  }\n\n  loadParamsFromModel() {\n    const props = this.getProps();\n    for (var i in props) {\n      this.formProperties.push(props[i]);\n    }\n  }\n\n  loadParamsProperties() {\n    const props = this.getProps();\n    for (var i in props) {\n      if (this.properties.includes(i)) {\n        this.formProperties.push(props[i]);\n      }\n    }\n  }\n\n\n  getProps() {\n    return this.item.constructor.getModelDefinition().properties;\n  }\n\n  getType(element) {\n    return typeof (element);\n  }\n\n  submitted() {\n    this.onSubmit.emit(this.item);\n  }\n\n}\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-paginator',\n  template: `<nav aria-label=\"Page navigation example\">\n  {{1+(currentPage*limit)}}-{{getLastNumber()}} of {{totalCount}}\n  <ul class=\"pagination justify-content-end\">\n    <li class=\"page-item\" [class.disabled]=\"currentPage==0\">\n      <a class=\"page-link\" (click)=\"onPrev()\" tabindex=\"-1\">Previous</a>\n    </li>\n    \n    <li class=\"page-item\" [class.disabled]=\"isDisabled()\">\n      <a class=\"page-link\" (click)=\"onNext()\">Next</a>\n    </li>\n  </ul>\n</nav>\n`,\n  styles: [``]\n})\nexport class PaginatorComponent implements OnInit {\n\n\n  @Input()\n  totalCount = 0;\n\n  @Input()\n  limit = 15;\n\n  totalPages = 0;\n\n  @Input()\n  currentPage = 0;\n\n  @Output()\n  next = new EventEmitter<any>();\n\n  @Output()\n  prev = new EventEmitter<any>();\n\n  @Output()\n  pageSelected = new EventEmitter<any>();\n\n  constructor() { }\n\n  ngOnInit() {\n    this.totalPages = this.totalCount / this.limit;\n  }\n\n  onNext() {\n    this.currentPage += 1;\n    this.next.emit(this.currentPage);\n  }\n\n  onPrev() {\n    this.currentPage -= 1;\n    this.prev.emit(this.currentPage);\n  }\n\n  isDisabled(): boolean {\n    return (this.getLastNumber() >= this.totalCount);\n  }\n\n  getLastNumber() {\n    if (this.totalCount < this.limit) {\n      return this.totalCount;\n    }\n    return (this.currentPage * this.limit) + this.limit;\n  }\n\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'capitalize'\n})\nexport class CapitalizePipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return value[0].toUpperCase() + value.slice(1, value.length);\n  }\n\n}\n",
    "import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-model-search',\n  template: `<form>\n  <div class=\"form-row\">\n    <div class=\"col-md-2 mb-3\">\n      <select name=\"property\" [(ngModel)]=\"property\" name=\"property\" class=\"form-control\">\n        <option selected value=\"any\">Any</option>\n        <option class=\"text-capitalize\" *ngFor=\"let item of properties\" [value]=\"item\">{{item}}</option>\n      </select>\n    </div>\n    <div class=\"col-md-8 mb-7\">\n      <input type=\"text\" class=\"form-control\" [placeholder]=\"property\" required [(ngModel)]=\"text\" name=\"text\">\n    </div>\n    <div class=\"col-md-2 mb-2\">\n      <button class=\"btn btn-primary form-control\" (click)=\"onSubmitted()\">Search</button>\n    </div>\n  </div>\n</form>\n`,\n  styles: [``]\n})\nexport class ModelSearchComponent implements OnInit {\n\n  @Input()\n  properties;\n\n  property = 'any';\n  text;\n\n  @Output()\n  submitted = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n\n  onSubmitted() {\n    if (this.property === 'any') {\n      this.searchAny();\n    }\n    else {\n      this.searchProperty();\n    }\n  }\n\n  searchProperty() {\n    this.submitted.emit({\n      property: this.property,\n      value: this.text\n    });\n  }\n\n  searchAny() {\n    this.submitted.emit({\n      property: this.property,\n      value: this.text,\n      properties: this.properties\n    });\n  }\n\n}\n"
  ],
  "names": [
    "ApiLoguedGuard",
    "auth",
    "userApi",
    "this",
    "prototype",
    "canActivate",
    "next",
    "state",
    "valid",
    "getCurrentUserData",
    "getToken",
    "getCurrent",
    "toPromise",
    "then",
    "user",
    "err",
    "type",
    "Injectable",
    "LoopBackAuth",
    "AdminApi",
    "declarations",
    "ModelFormComponent",
    "ApiRowComponent",
    "ApiTableComponent",
    "PaginatorComponent",
    "CapitalizePipe",
    "ModelSearchComponent",
    "LoopbackNgAdminModule",
    "NgModule",
    "args",
    "imports",
    "CommonModule",
    "FormsModule",
    "RouterModule",
    "FroalaEditorModule",
    "forRoot",
    "FroalaViewModule",
    "__spread",
    "providers",
    "exports",
    "LoopbackApiLoaderComponent",
    "loaderApi",
    "loaderConfig",
    "page",
    "limit",
    "order",
    "className",
    "loaderPage",
    "loaderCount",
    "loaderSearch",
    "property",
    "value",
    "loaderItemModel",
    "User",
    "modelProperties",
    "modelDefinition",
    "getModelDefinition",
    "baseRoute",
    "createRoute",
    "editRoute",
    "apiRoute",
    "loadModels",
    "loadModel",
    "loadRoutes",
    "sdkModels",
    "SDKModels",
    "path",
    "toLowerCase",
    "get",
    "getModelName",
    "properties",
    "getFilter",
    "filter",
    "skip",
    "search",
    "name",
    "like",
    "options",
    "getWhereAny",
    "where",
    "or",
    "i",
    "item",
    "push",
    "loadData",
    "_this",
    "find",
    "items",
    "loaderItems",
    "count",
    "catch",
    "handleError",
    "apiSearch",
    "$event",
    "error",
    "alert",
    "message",
    "nextPage",
    "prevPage",
    "LoopbackApiItemEditorComponent",
    "api",
    "route",
    "model",
    "getModel",
    "constructor",
    "constr",
    "backRoute",
    "loadParams",
    "params",
    "subscribe",
    "selectedId",
    "findById",
    "createItem",
    "create",
    "editItem",
    "upsert",
    "onSubmit",
    "promise",
    "removeItem",
    "confirm",
    "deleteById",
    "window",
    "history",
    "back",
    "_super",
    "http",
    "connection",
    "models",
    "searchParams",
    "errorHandler",
    "call",
    "tslib_1.__extends",
    "findByIdAccessTokens",
    "id",
    "fk",
    "customHeaders",
    "_url",
    "LoopBackConfig",
    "getPath",
    "getApiVersion",
    "_routeParams",
    "request",
    "destroyByIdAccessTokens",
    "updateByIdAccessTokens",
    "data",
    "_postBody",
    "getAccessTokens",
    "_urlParams",
    "createAccessTokens",
    "deleteAccessTokens",
    "countAccessTokens",
    "patchOrCreate",
    "patchAttributes",
    "login",
    "credentials",
    "include",
    "rememberMe",
    "map",
    "response",
    "ttl",
    "parseInt",
    "setToken",
    "logout",
    "access_token",
    "getAccessTokenId",
    "clear",
    "verify",
    "uid",
    "token",
    "redirect",
    "resetPassword",
    "changePassword",
    "oldPassword",
    "newPassword",
    "setPassword",
    "createManyAccessTokens",
    "getCurrentUserId",
    "getCachedCurrent",
    "getCurrentToken",
    "isAuthenticated",
    "getCurrentId",
    "BaseLoopBackApi",
    "Http",
    "decorators",
    "Inject",
    "SocketConnection",
    "JSONSearchParams",
    "ErrorHandler",
    "Optional",
    "createChangeStream",
    "subject",
    "Subject",
    "EventSource",
    "emit",
    "msg",
    "JSON",
    "parse",
    "source",
    "join",
    "addEventListener",
    "onerror",
    "console",
    "warn",
    "asObservable",
    "onReplaceById",
    "undefined",
    "factory",
    "replaceById",
    "onReplaceOrCreate",
    "replaceOrCreate",
    "onUpsertWithWhere",
    "upsertWithWhere",
    "onUpsertPatch",
    "upsertPatch",
    "onUpsert",
    "onUpdateAttributes",
    "updateAttributes",
    "onDeleteById",
    "onUpdateAll",
    "updateAll",
    "findOne",
    "exists",
    "datum",
    "onCreateMany",
    "createMany",
    "onCreate",
    "authenticate",
    "url",
    "headers",
    "append",
    "getAuthPrefix",
    "method",
    "routeParams",
    "urlParams",
    "postBody",
    "pubsub",
    "Object",
    "keys",
    "forEach",
    "key",
    "replace",
    "RegExp",
    "match",
    "arr",
    "split",
    "pop",
    "event",
    "subject_1",
    "on",
    "res",
    "Headers",
    "body",
    "postBodyKeys",
    "length",
    "shift",
    "isHeadersFilteringSet",
    "stringify",
    "encodeURIComponent",
    "setJSON",
    "Request",
    "RequestOptions",
    "getURLSearchParams",
    "withCredentials",
    "getRequestOptionsCredentials",
    "text",
    "json",
    "e",
    "SocketDriver",
    "NgZone",
    "connect",
    "driver",
    "zone",
    "subjects",
    "onConnect",
    "onDisconnect",
    "onAuthenticated",
    "onUnAuthorized",
    "sharedObservables",
    "authenticated",
    "sharedOnConnect",
    "share",
    "sharedOnDisconnect",
    "sharedOnAuthenticated",
    "sharedOnUnAuthorized",
    "socket",
    "connected",
    "off",
    "destroy",
    "info",
    "log",
    "secure",
    "isSecureWebSocketsSet",
    "forceNew",
    "forceWebsockets",
    "transports",
    "heartbeater",
    "status",
    "isConnected",
    "handler",
    "run",
    "removeListener",
    "removeAllListeners",
    "disconnect",
    "setInterval",
    "clearInterval",
    "obj",
    "_usp",
    "URLSearchParams",
    "_JSON2URL",
    "parent",
    "parts",
    "_parseParam",
    "processedKey",
    "Array",
    "isArray",
    "setApiVersion",
    "version",
    "setBaseURL",
    "setAuthPrefix",
    "authPrefix",
    "setDebugMode",
    "isEnabled",
    "debug",
    "debuggable",
    "filterOnUrl",
    "filterOn",
    "filterOnHeaders",
    "setSecureWebSockets",
    "unsetSecureWebSockets",
    "setRequestOptionsCredentials",
    "Admin",
    "modelName",
    "getAll",
    "getModelNames",
    "plural",
    "idName",
    "realm",
    "username",
    "email",
    "emailVerified",
    "password",
    "relations",
    "accessTokens",
    "relationType",
    "keyFrom",
    "keyTo",
    "SDKToken",
    "scopes",
    "created",
    "userId",
    "assign",
    "InternalStorage",
    "BaseStorage",
    "set",
    "expires",
    "remove",
    "storage",
    "prefix",
    "load",
    "setRememberMe",
    "setUser",
    "save",
    "today",
    "Date",
    "getTime",
    "persist",
    "prop",
    "Observable",
    "throw",
    "extendStatics",
    "setPrototypeOf",
    "__proto__",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "__read",
    "o",
    "n",
    "m",
    "Symbol",
    "iterator",
    "r",
    "ar",
    "done",
    "arguments",
    "concat",
    "tableProperties",
    "ngOnInit",
    "tableModel",
    "tableItems",
    "readArrProperties",
    "readPropertiesDefault",
    "props",
    "getProps",
    "includes",
    "Component",
    "selector",
    "template",
    "styles",
    "Input",
    "rowItem",
    "formProperties",
    "EventEmitter",
    "defineProperty",
    "loadParamsProperties",
    "loadParamsFromModel",
    "getType",
    "element",
    "submitted",
    "Output",
    "totalCount",
    "totalPages",
    "currentPage",
    "prev",
    "pageSelected",
    "onNext",
    "onPrev",
    "isDisabled",
    "getLastNumber",
    "transform",
    "toUpperCase",
    "slice",
    "Pipe",
    "onSubmitted",
    "searchAny",
    "searchProperty"
  ],
  "mappings": "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"
}
