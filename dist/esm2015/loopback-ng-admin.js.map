{
  "version": 3,
  "file": "loopback-ng-admin.js",
  "sources": [
    "ng://loopback-ng-admin/out/src/app/controllers/impl/loopback-api-item-editor/loopback-api-item-editor.component.ts",
    "ng://loopback-ng-admin/out/src/app/controllers/impl/loopback-api-loader/loopback-api-loader.component.ts",
    "ng://loopback-ng-admin/out/src/app/loopback-ng-admin.module.ts",
    "ng://loopback-ng-admin/out/src/app/guards/api-logued.guard.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/custom/logger.service.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/custom/Admin.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/real.time.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/base.service.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/sockets/socket.connections.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/sockets/socket.driver.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/custom/SDKModels.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/lb.config.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/search.params.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/error.service.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/services/core/auth.service.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/storage/storage.swaps.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/models/FireLoopRef.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/models/BaseModels.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/models/Admin.ts",
    "ng://loopback-ng-admin/out/src/app/sdk/models/User.ts",
    "ng://loopback-ng-admin/out/src/app/components/model-search/model-search.component.ts",
    "ng://loopback-ng-admin/out/src/app/pipes/capitalize.pipe.ts",
    "ng://loopback-ng-admin/out/src/app/components/paginator/paginator.component.ts",
    "ng://loopback-ng-admin/out/src/app/components/model-form/model-form.component.ts",
    "ng://loopback-ng-admin/out/src/app/components/api-table/api-row/api-row.component.ts",
    "ng://loopback-ng-admin/out/src/app/components/api-table/api-table.component.ts"
  ],
  "sourcesContent": [
    "import { Component, OnInit } from '@angular/core';\nimport { GenericApiItemEditor } from '../../generic-api-item-editor.';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { BaseLoopBackApi } from '../../../sdk';\n\nexport class LoopbackApiItemEditorComponent<Model, ModelApi extends BaseLoopBackApi> implements GenericApiItemEditor {\n\n  public item: Model;\n  public className;\n  protected selectedId;\n\n  public formProperties;\n\n  backRoute;\n  baseRoute = '/dashboard';\n\n  constructor(protected api: ModelApi, protected route: ActivatedRoute) {\n    const model = this.api.getModel();\n    this.item = new model();\n    this.className = this.item.constructor.name;\n    const constr: any = this.item.constructor;\n    this.backRoute = `${this.baseRoute}/${constr.getModelDefinition().path.toLowerCase()}`;\n  }\n\n  loadParams() {\n    this.route.params.subscribe(params => {\n      if (params.id) {\n        this.selectedId = params.id;\n        this.loadData();\n      }\n    });\n\n  }\n\n  loadData() {\n    return this.api.findById(this.selectedId).toPromise().then(\n      (item: Model) => this.item = item\n    ).catch(this.handleError);\n  }\n\n  protected handleError(error) {\n    alert(error.message);\n  }\n\n\n  createItem() {\n    return this.api.create(this.item).toPromise().catch(this.handleError);\n  }\n\n  editItem() {\n    return this.api.upsert(this.item).toPromise().catch(this.handleError);\n  }\n\n  onSubmit($event) {\n    this.item = $event;\n    let promise: any = this.api.create(this.item).toPromise();\n    if (this.item['id']) {\n      promise = this.api.upsert(this.item).toPromise();\n    }\n\n    promise.then((item: Model) => {\n      this.item = item;\n      alert('Element modified');\n    }).catch(this.handleError);\n  }\n\n  removeItem() {\n    const resp = confirm(\"Are you sure you want to remove?\")\n    if (!resp)\n      return;\n    this.api.deleteById(this.item['id']).toPromise().then(\n      item => { alert('item removed'); window.history.back() },\n      this.handleError\n    );\n  }\n\n}\n",
    "import { Component, OnInit, Inject, forwardRef } from '@angular/core';\nimport { GenericApiLoader } from '../../generic-api-loader.';\nimport { BaseLoopBackApi, SDKModels, User } from '../../../sdk';\n\n\nexport interface LoaderSearch {\n  property: string;\n  value: string;\n  properties?: [string];\n}\n\nexport class LoopbackApiLoaderComponent<Model, ModelApi extends BaseLoopBackApi> implements GenericApiLoader {\n  static sdkModels = null;\n  loaderConfig = {\n    page: 0,\n    limit: 15,\n    order: 'date'\n  };\n\n  public className = '';\n\n  protected loaderPage = this.loaderConfig.page;\n\n  loaderItems: [Model];\n\n  loaderCount = 0;\n\n  protected loaderSearch: LoaderSearch = { property: '', value: '' };\n\n  loaderItemModel = User;\n\n  modelProperties = {};\n  modelDefinition = User.getModelDefinition();\n\n  baseRoute = '/dashboard';\n\n  createRoute = '/dashboard/topics/create';\n  editRoute = '/dashboard/topics';\n\n  apiRoute = '';\n\n  constructor(protected loaderApi: ModelApi) {\n    this.loadModels();\n    this.loadModel();\n    this.loadRoutes();\n  }\n\n  private loadModels() {\n    if (!LoopbackApiLoaderComponent.sdkModels) {\n      LoopbackApiLoaderComponent.sdkModels = new SDKModels();\n    }\n  }\n\n  private loadRoutes() {\n    this.apiRoute = this.modelDefinition.path.toLowerCase();\n\n    this.editRoute = `${this.baseRoute}/${this.apiRoute}`;\n    this.createRoute = `${this.editRoute}/create`;\n  }\n\n  private loadModel() {\n    this.loaderItemModel = LoopbackApiLoaderComponent.sdkModels.get(this.loaderApi.getModelName());\n\n\n    this.modelDefinition = this.loaderItemModel.getModelDefinition();\n\n    this.modelProperties = this.modelDefinition.properties;\n\n  }\n\n  private getFilter() {\n    const filter = { limit: this.loaderConfig.limit, skip: this.loaderConfig.limit * this.loaderPage };\n\n    if (this.loaderSearch) {\n      const search = this.loaderSearch;\n      const name = search.property;\n      if (search.property !== 'any') {\n        filter['where'] = {};\n        filter['where'][name] = { 'like': search.value, options: 'i' };\n      } else {\n        filter['where'] = this.getWhereAny(search.properties, search.value);\n      }\n    }\n\n    return filter;\n  }\n\n  getWhereAny(properties, value) {\n    const where = { or: [] };\n    for (let i in properties) {\n      const name = properties[i];\n      const type = this.modelProperties[name].type;\n      if (type != 'Date') {\n        var item = {};\n        item[name] = { 'like': value, options: 'i' };\n        where.or.push(item);\n      }\n    }\n    return where;\n\n  }\n\n\n  loadData() {\n    this.loaderApi.find(this.getFilter()).toPromise().then(\n      (items: [Model]) => {\n        this.loaderItems = items;\n      }\n    );\n\n    this.loaderApi.count().toPromise().then(\n      count => this.loaderCount = count.count\n    ).catch(this.handleError);\n  }\n\n\n  apiSearch($event) {\n    this.loaderSearch = $event;\n    this.loadData();\n  }\n\n\n  handleError(error) {\n    alert(error.message ? error.message : error);\n  }\n\n  nextPage() {\n    this.loaderPage++;\n    this.loadData();\n  }\n\n  prevPage() {\n    this.loaderPage--;\n    this.loadData();\n  }\n\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ApiTableComponent } from './components/api-table/api-table.component';\nimport { ApiRowComponent } from './components/api-table/api-row/api-row.component';\nimport { ModelFormComponent } from './components/model-form/model-form.component';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { PaginatorComponent } from './components/paginator/paginator.component';\nimport { CapitalizePipe } from './pipes/capitalize.pipe';\nimport { ModelSearchComponent } from './components/model-search/model-search.component';\nimport { ApiLoguedGuard } from './guards/api-logued.guard';\nimport { FroalaEditorModule, FroalaViewModule } from 'angular-froala-wysiwyg';\n\n\nconst declarations = [\n  ModelFormComponent,\n  ApiRowComponent,\n  ApiTableComponent,\n  PaginatorComponent, CapitalizePipe, ModelSearchComponent\n\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    FroalaEditorModule.forRoot(), FroalaViewModule.forRoot()\n  ],\n  declarations: [...declarations],\n  providers: [ApiLoguedGuard],\n  exports: [...declarations]\n})\nexport class LoopbackNgAdminModule { }\n",
    "import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\nimport { LoopBackAuth, AdminApi } from '../sdk';\n\n@Injectable()\nexport class ApiLoguedGuard implements CanActivate {\n\n  static valid = false;\n  constructor(private auth: LoopBackAuth, private userApi: AdminApi) { }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n\n    if (!ApiLoguedGuard.valid) {\n      const user = this.auth.getCurrentUserData();\n      const token = this.auth.getToken();\n      return this.userApi.getCurrent().toPromise().then(user => {\n        ApiLoguedGuard.valid = true;\n        return true;\n      }, err => {\n        return false;\n      });\n    }\n    else {\n      return true;\n    }\n  }\n}\n",
    "/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { LoopBackConfig } from '../../lb.config';\r\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@johncasarrubias>\r\n* @module LoggerService\r\n* @license MIT\r\n* @description\r\n* Console Log wrapper that can be disabled in production mode\r\n**/\r\n@Injectable()\r\nexport class LoggerService {\r\n\r\n  log(...args: any[]) {\r\n    if (LoopBackConfig.debuggable())\r\n    console.log.apply(console, args);\r\n  }\r\n\r\n  info(...args: any[]) {\r\n    if (LoopBackConfig.debuggable())\r\n    console.info.apply(console, args);\r\n  }\r\n\r\n  error(...args: any[]) {\r\n    if (LoopBackConfig.debuggable())\r\n    console.error.apply(console, args);\r\n  }\r\n\r\n  count(arg: string) {\r\n    if (LoopBackConfig.debuggable())\r\n    console.count(arg);\r\n  }\r\n\r\n  group(arg: string) {\r\n    if (LoopBackConfig.debuggable())\r\n    console.count(arg);\r\n  }\r\n\r\n  groupEnd() {\r\n    if (LoopBackConfig.debuggable())\r\n    console.groupEnd();\r\n  }\r\n\r\n  profile(arg: string) {\r\n    if (LoopBackConfig.debuggable())\r\n    console.count(arg);\r\n  }\r\n\r\n  profileEnd() {\r\n    if (LoopBackConfig.debuggable())\r\n    console.profileEnd();\r\n  }\r\n\r\n  time(arg: string) {\r\n    if (LoopBackConfig.debuggable())\r\n    console.time(arg);\r\n  }\r\n\r\n  timeEnd(arg: string) {\r\n    if (LoopBackConfig.debuggable())\r\n    console.timeEnd(arg);\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { SDKModels } from './SDKModels';\r\nimport { BaseLoopBackApi } from '../core/base.service';\r\nimport { LoopBackConfig } from '../../lb.config';\r\nimport { LoopBackAuth } from '../core/auth.service';\r\nimport { LoopBackFilter, SDKToken, AccessToken } from '../../models/BaseModels';\r\nimport { JSONSearchParams } from '../core/search.params';\r\nimport { ErrorHandler } from '../core/error.service';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { Admin } from '../../models/Admin';\r\nimport { SocketConnection } from '../../sockets/socket.connections';\r\n\r\n\r\n/**\r\n * Api services for the `Admin` model.\r\n */\r\n@Injectable()\r\nexport class AdminApi extends BaseLoopBackApi {\r\n\r\n  constructor(\r\n    @Inject(Http) protected http: Http,\r\n    @Inject(SocketConnection) protected connection: SocketConnection,\r\n    @Inject(SDKModels) protected models: SDKModels,\r\n    @Inject(LoopBackAuth) protected auth: LoopBackAuth,\r\n    @Inject(JSONSearchParams) protected searchParams: JSONSearchParams,\r\n    @Optional() @Inject(ErrorHandler) protected errorHandler: ErrorHandler\r\n  ) {\r\n    super(http,  connection,  models, auth, searchParams, errorHandler);\r\n  }\r\n\r\n  /**\r\n   * Find a related item by id for accessTokens.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  fk Foreign key for accessTokens\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public findByIdAccessTokens(id: any, fk: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens/:fk\";\r\n    let _routeParams: any = {\r\n      id: id,\r\n      fk: fk\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Delete a related item by id for accessTokens.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  fk Foreign key for accessTokens\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public destroyByIdAccessTokens(id: any, fk: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"DELETE\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens/:fk\";\r\n    let _routeParams: any = {\r\n      id: id,\r\n      fk: fk\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Update a related item by id for accessTokens.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  fk Foreign key for accessTokens\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public updateByIdAccessTokens(id: any, fk: any, data: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"PUT\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens/:fk\";\r\n    let _routeParams: any = {\r\n      id: id,\r\n      fk: fk\r\n    };\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Queries accessTokens of Admin.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  filter \r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public getAccessTokens(id: any, filter: LoopBackFilter = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    if (typeof filter !== 'undefined' && filter !== null) _urlParams.filter = filter;\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance in accessTokens of this model.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public createAccessTokens(id: any, data: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Deletes all accessTokens of this model.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public deleteAccessTokens(id: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"DELETE\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Counts accessTokens of Admin.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  where Criteria to match model instances\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * Data properties:\r\n   *\r\n   *  - `count` – `{number}` - \r\n   */\r\n  public countAccessTokens(id: any, where: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens/count\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    if (typeof where !== 'undefined' && where !== null) _urlParams.where = where;\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Patch an existing model instance or insert a new one into the data source.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   *  - `data` – `{object}` - Model instance data\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public patchOrCreate(data: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"PATCH\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Patch attributes for a model instance and persist it into the data source.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  data Request data.\r\n   *\r\n   *  - `data` – `{object}` - An object of model property name/value pairs\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public patchAttributes(id: any, data: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"PATCH\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Login a user with username/email and password.\r\n   *\r\n   * @param include Related objects to include in the response. See the description of return value for more details.\r\n   *   Default value: `user`.\r\n   *\r\n   *  - `rememberMe` - `boolean` - Whether the authentication credentials\r\n   *     should be remembered in localStorage across app/browser restarts.\r\n   *     Default: `true`.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * El cuerpo de respuesta contiene propiedades de la AccessToken creada durante el inicio de la sesión.\r\n   * Dependiendo del valor del parámetro `include`, el cuerpo puede contener propiedades adicionales:\r\n   * \r\n   *   - `user` - `U+007BUserU+007D` - Datos del usuario conectado actualmente. (`include=user`)\r\n   * \r\n   *\r\n   */\r\n  public login(credentials: any, include: any = 'user', rememberMe: boolean = true, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/login\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      credentials: credentials\r\n    };\r\n    let _urlParams: any = {};\r\n    if (typeof include !== 'undefined' && include !== null) _urlParams.include = include;\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders)\r\n      .map(\r\n        (response: any) => {\r\n          response.ttl = parseInt(response.ttl);\r\n          response.rememberMe = rememberMe;\r\n          this.auth.setToken(response);\r\n          return response;\r\n        }\r\n      );\r\n      return result;\r\n      \r\n  }\r\n\r\n  /**\r\n   * Logout a user with access token.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method does not accept any data. Supply an empty object.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public logout(customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/logout\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n       _urlParams.access_token = this.auth.getAccessTokenId();\r\n    this.auth.clear(); \r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Trigger user's identity verification with configured verifyOptions\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method does not accept any data. Supply an empty object.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public verify(id: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/verify\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Confirm a user registration with identity verification token.\r\n   *\r\n   * @param uid \r\n   *\r\n   * @param token \r\n   *\r\n   * @param redirect \r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public confirm(uid: any, token: any, redirect: any = {}, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/confirm\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {};\r\n    let _urlParams: any = {};\r\n    if (typeof uid !== 'undefined' && uid !== null) _urlParams.uid = uid;\r\n    if (typeof token !== 'undefined' && token !== null) _urlParams.token = token;\r\n    if (typeof redirect !== 'undefined' && redirect !== null) _urlParams.redirect = redirect;\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Reset password for a user with email.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public resetPassword(options: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/reset\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      options: options\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Change a user's password.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   *  - `oldPassword` – `{string}` - \r\n   *\r\n   *  - `newPassword` – `{string}` - \r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public changePassword(oldPassword: any, newPassword: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/change-password\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      data: {\r\n        oldPassword: oldPassword,\r\n        newPassword: newPassword\r\n      }\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Reset user's password via a password-reset token.\r\n   *\r\n   *  data Request data.\r\n   *\r\n   *  - `newPassword` – `{string}` - \r\n   *\r\n   * @returns An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * This method returns no data.\r\n   */\r\n  public setPassword(newPassword: any, customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/reset-password\";\r\n    let _routeParams: any = {};\r\n    let _postBody: any = {\r\n      data: {\r\n        newPassword: newPassword\r\n      }\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance in accessTokens of this model.\r\n   *\r\n   *  id Admin id\r\n   *\r\n   *  data Request data.\r\n   *\r\n   * This method expects a subset of model properties as request parameters.\r\n   *\r\n   * @returns  An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   *\r\n   * <em>\r\n   * (The remote method definition does not provide any description.\r\n   * This usually means the response is a `Admin` object.)\r\n   * </em>\r\n   */\r\n  public createManyAccessTokens(id: any, data: any[] = [], customHeaders?: Function): Observable<any> {\r\n    let _method: string = \"POST\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() +\r\n    \"/Admins/:id/accessTokens\";\r\n    let _routeParams: any = {\r\n      id: id\r\n    };\r\n    let _postBody: any = {\r\n      data: data\r\n    };\r\n    let _urlParams: any = {};\r\n    let result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\r\n    return result;\r\n  }\r\n  /**\r\n   * @ngdoc method\r\n   * @name sdk.Admin#getCurrent\r\n   * @methodOf sdk.Admin\r\n   *\r\n   * @description\r\n   *\r\n   * Get data of the currently logged user. Fail with HTTP result 401\r\n   * when there is no user logged in.\r\n   *\r\n   * @returns object An empty reference that will be\r\n   *   populated with the actual data once the response is returned\r\n   *   from the server.\r\n   */\r\n  public getCurrent(filter: LoopBackFilter = {}): Observable<any> {\r\n    let _method: string = \"GET\";\r\n    let _url: string = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Admins\" + \"/:id\";\r\n    let id: any = this.auth.getCurrentUserId();\r\n    if (id == null)\r\n    id = '__anonymous__';\r\n    let _routeParams: any = { id: id };\r\n    let _urlParams: any = {};\r\n    let _postBody: any = {};\r\n    if (filter) _urlParams.filter = filter;\r\n    return this.request(_method, _url, _routeParams, _urlParams, _postBody);\r\n  }\r\n  /**\r\n   * Get data of the currently logged user that was returned by the last\r\n   * call to {@link sdk.Admin#login} or\r\n   * {@link sdk.Admin#getCurrent}. Return null when there\r\n   * is no user logged in or the data of the current user were not fetched\r\n   * yet.\r\n   *\r\n   * @returns object An Account instance.\r\n   */\r\n  public getCachedCurrent() {\r\n    return this.auth.getCurrentUserData();\r\n  }\r\n  /**\r\n   * Get data of the currently logged access tokern that was returned by the last\r\n   * call to {@link sdk.Admin#login}\r\n   *\r\n   * @returns object An AccessToken instance.\r\n   */\r\n  public getCurrentToken(): AccessToken {\r\n    return this.auth.getToken();\r\n  }\r\n  /**\r\n   * @name sdk.Admin#isAuthenticated\r\n   *\r\n   */\r\n  public isAuthenticated() {\r\n    return !(this.getCurrentId() === '' || this.getCurrentId() == null || this.getCurrentId() == 'null');\r\n  }\r\n\r\n  /**\r\n   * @name sdk.Admin#getCurrentId\r\n   *\r\n   * @returns object Id of the currently logged-in user or null.\r\n   */\r\n  public getCurrentId() {\r\n    return this.auth.getCurrentUserId();\r\n  }\r\n\r\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `Admin`.\r\n   */\r\n  public getModelName() {\r\n    return \"Admin\";\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\nimport 'rxjs/add/operator/share';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { IO } from './io.service';\r\nimport { LoopBackAuth } from './auth.service';\r\nimport { FireLoop } from '../../models/FireLoop';\r\nimport { SocketConnection } from '../../sockets/socket.connections';\r\nimport { SDKModels } from '../custom/SDKModels';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/share';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@johncasarrubias>\r\n* @module RealTime\r\n* @license MIT\r\n* @description\r\n* This module is a real-time interface for using socket connections, its main purpose\r\n* is to make sure that when there is a valid connection, it will create instances\r\n* of the different real-time functionalities like FireLoop, PubSub and IO.\r\n**/\r\n@Injectable()\r\nexport class RealTime {\r\n  public IO: IO;\r\n  public FireLoop: FireLoop;\r\n  private connecting: boolean = false;\r\n  private onReadySubject: Subject<string> = new Subject<string>();\r\n  private sharedOnReady: Observable<string> = this.onReadySubject.asObservable().share();\r\n  /**\r\n  * @method constructor\r\n  * @param connection WebSocket connection service\r\n  * @param models Model provider service\r\n  * @param auth LoopBack authentication service\r\n  * @description\r\n  * It will intialize the shared on ready communication channel.\r\n  **/\r\n  constructor(\r\n    @Inject(SocketConnection) public connection: SocketConnection,\r\n    @Inject(SDKModels) protected models: SDKModels,\r\n    @Inject(LoopBackAuth) protected auth: LoopBackAuth\r\n  ) {\r\n    this.sharedOnReady.subscribe();\r\n  }\r\n  /**\r\n  * @method onDisconnect\r\n  * @return \r\n  * @description\r\n  * Will trigger when Real-Time Service is disconnected from server.\r\n  **/\r\n  onDisconnect(): Observable<any> {\r\n    return this.connection.sharedObservables.sharedOnDisconnect;\r\n  }\r\n  /**\r\n  * @method onAuthenticated\r\n  * @return \r\n  * @description\r\n  * Will trigger when Real-Time Service is authenticated with the server.\r\n  **/\r\n  onAuthenticated(): Observable<any> {\r\n    return this.connection.sharedObservables.sharedOnAuthenticated;\r\n  }\r\n  /**\r\n  * @method onUnAuthorized\r\n  * @return \r\n  * @description\r\n  * Will trigger when Real-Time Service is not authorized to connect with the server.\r\n  **/\r\n  onUnAuthorized(): Observable<any> {\r\n    return this.connection.sharedObservables.sharedOnUnAuthorized;\r\n  }\r\n  /**\r\n  * @method onReady\r\n  * @return \r\n  * @description\r\n  * Will trigger when Real-Time Service is Ready for broadcasting.\r\n  * and will register connection flow events to notify subscribers.\r\n  **/\r\n  public onReady(): Observable<any> {\r\n    // If there is a valid connection, then we just send back to the EventLoop\r\n    // Or next will be executed before the actual subscription.\r\n    if (this.connection.isConnected()) {\r\n      let to = setTimeout(() => {\r\n        this.onReadySubject.next('shared-connection');\r\n        clearTimeout(to);\r\n      });\r\n    // Else if there is a current attempt of connection we wait for the prior\r\n    // process that started the connection flow.\r\n    } else if (this.connecting) {\r\n      let ti = setInterval(() => {\r\n        if (this.connection.isConnected()) {\r\n          this.onReadySubject.next('shared-connection');\r\n          clearInterval(ti);\r\n        }\r\n      }, 500);\r\n    // If there is not valid connection or attempt, then we start the connection flow\r\n    // and make sure we notify all the onReady subscribers when done.\r\n    // Also it will listen for desconnections so we unsubscribe and avoid both:\r\n    // Memory leaks and duplicated triggered events.\r\n    } else {\r\n      this.connecting = true;\r\n      this.connection.connect(this.auth.getToken());\r\n      this.IO       = new IO(this.connection);\r\n      this.FireLoop = new FireLoop(this.connection, this.models);\r\n      // Fire event for those subscribed \r\n      let s1: Subscription = this.connection.sharedObservables.sharedOnConnect.subscribe(() => {\r\n        console.log('Real-Time connection has been established');\r\n        this.connecting = false;\r\n        this.onReadySubject.next('connected');\r\n        let s2: Subscription = this.connection.sharedObservables.sharedOnDisconnect.subscribe(() => {\r\n          s1.unsubscribe();\r\n          s2.unsubscribe();\r\n        });\r\n      });\r\n    }\r\n    return this.sharedOnReady;\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Http, Headers, Request, RequestOptions } from '@angular/http';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { JSONSearchParams } from './search.params';\r\nimport { ErrorHandler } from './error.service';\r\nimport { LoopBackAuth } from './auth.service';\r\nimport { LoopBackConfig } from '../../lb.config';\r\nimport { LoopBackFilter, AccessToken } from '../../models/BaseModels';\r\nimport { SDKModels } from '../custom/SDKModels';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\nimport { SocketConnection } from '../../sockets/socket.connections';\r\n// Making Sure EventSource Type is available to avoid compilation issues.\r\ndeclare var EventSource: any;\r\n/**\r\n* @module BaseLoopBackApi\r\n* @author Jonathan Casarrubias <@johncasarrubias> <github:jonathan-casarrubias>\r\n* @author Nikolay Matiushenkov <https://github.com/mnvx>\r\n* @license MIT\r\n* @description\r\n* Abstract class that will be implemented in every custom service automatically built\r\n* by the sdk builder.\r\n* It provides the core functionallity for every API call, either by HTTP Calls or by\r\n* WebSockets.\r\n**/\r\n@Injectable()\r\nexport abstract class BaseLoopBackApi {\r\n\r\n  protected path: string;\r\n  protected model: any;\r\n\r\n  constructor(\r\n    @Inject(Http) protected http: Http,\r\n    @Inject(SocketConnection) protected connection: SocketConnection,\r\n    @Inject(SDKModels) protected models: SDKModels,\r\n    @Inject(LoopBackAuth) protected auth: LoopBackAuth,\r\n    @Inject(JSONSearchParams) protected searchParams: JSONSearchParams,\r\n    @Optional() @Inject(ErrorHandler) protected errorHandler: ErrorHandler\r\n  ) {\r\n    this.model = this.models.get(this.getModelName());\r\n  }\r\n\r\n  getModel() {\r\n    return this.model;\r\n  }\r\n\r\n  /**\r\n   * @method request\r\n   * @param  method      Request method (GET, POST, PUT)\r\n   * @param  url         Request url (my-host/my-url/:id)\r\n   * @param     routeParams Values of url parameters\r\n   * @param     urlParams   Parameters for building url (filter and other)\r\n   * @param     postBody    Request postBody\r\n   * @return\r\n   * @description\r\n   * This is a core method, every HTTP Call will be done from here, every API Service will\r\n   * extend this class and use this method to get RESTful communication.\r\n   **/\r\n  public request(\r\n    method: string,\r\n    url: string,\r\n    routeParams: any = {},\r\n    urlParams: any = {},\r\n    postBody: any = {},\r\n    pubsub: boolean = false,\r\n    customHeaders?: Function\r\n  ): Observable<any> {\r\n    // Transpile route variables to the actual request Values\r\n    Object.keys(routeParams).forEach((key: string) => {\r\n      url = url.replace(new RegExp(\":\" + key + \"(\\/|$)\", \"g\"), routeParams[key] + \"$1\")\r\n    });\r\n    if (pubsub) {\r\n      if (url.match(/fk/)) {\r\n        let arr = url.split('/'); arr.pop();\r\n        url = arr.join('/');\r\n      }\r\n      let event: string = (`[${method}]${url}`).replace(/\\?/, '');\r\n      let subject: Subject<any> = new Subject<any>();\r\n      this.connection.on(event, (res: any) => subject.next(res));\r\n      return subject.asObservable();\r\n    } else {\r\n      // Headers to be sent\r\n      let headers: Headers = new Headers();\r\n      headers.append('Content-Type', 'application/json');\r\n      // Authenticate request\r\n      this.authenticate(url, headers);\r\n      // Body fix for built in remote methods using \"data\", \"options\" or \"credentials\r\n      // that are the actual body, Custom remote method properties are different and need\r\n      // to be wrapped into a body object\r\n      let body: any;\r\n      let postBodyKeys = typeof postBody === 'object' ? Object.keys(postBody) : []\r\n      if (postBodyKeys.length === 1) {\r\n        body = postBody[postBodyKeys.shift()];\r\n      } else {\r\n        body = postBody;\r\n      }\r\n      let filter: string = '';\r\n      // Separate filter object from url params and add to search query\r\n      if (urlParams.filter) {\r\n        if (LoopBackConfig.isHeadersFilteringSet()) {\r\n          headers.append('filter', JSON.stringify(urlParams.filter));\r\n        } else {\r\n          filter = `?filter=${encodeURIComponent(JSON.stringify(urlParams.filter))}`;\r\n        }\r\n        delete urlParams.filter;\r\n      }\r\n      // Separate where object from url params and add to search query\r\n      /**\r\n      CODE BELOW WILL GENERATE THE FOLLOWING ISSUES:\r\n      - https://github.com/mean-expert-official/loopback-sdk-builder/issues/356\r\n      - https://github.com/mean-expert-official/loopback-sdk-builder/issues/328 \r\n      if (urlParams.where) {\r\n        headers.append('where', JSON.stringify(urlParams.where));\r\n        delete urlParams.where;\r\n      }\r\n      **/\r\n      if (typeof customHeaders === 'function') {\r\n        headers = customHeaders(headers);\r\n      }\r\n      this.searchParams.setJSON(urlParams);\r\n      let request: Request = new Request(\r\n        new RequestOptions({\r\n          headers: headers,\r\n          method: method,\r\n          url: `${url}${filter}`,\r\n          search: Object.keys(urlParams).length > 0 ? this.searchParams.getURLSearchParams() : null,\r\n          body: body ? JSON.stringify(body) : undefined,\r\n          withCredentials: LoopBackConfig.getRequestOptionsCredentials()\r\n        })\r\n      );\r\n      return this.http.request(request)\r\n        .map((res: any) => (res.text() != \"\" ? res.json() : {}))\r\n        .catch((e) => this.errorHandler.handleError(e));\r\n    }\r\n  }\r\n  /**\r\n   * @method authenticate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param url Server URL\r\n   * @param headers HTTP Headers\r\n   * @return\r\n   * @description\r\n   * This method will try to authenticate using either an access_token or basic http auth\r\n   */\r\n  public authenticate<T>(url: string, headers: Headers): void {\r\n    if (this.auth.getAccessTokenId()) {\r\n      headers.append(\r\n        'Authorization',\r\n        LoopBackConfig.getAuthPrefix() + this.auth.getAccessTokenId()\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * @method create\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type\r\n   * @return\r\n   * @description\r\n   * Generic create method\r\n   */\r\n  public create<T>(data: T, customHeaders?: Function): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onCreate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type array\r\n   * @return\r\n   * @description\r\n   * Generic pubsub oncreate many method\r\n   */\r\n  public onCreate<T>(data: T[]): Observable<T[]> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, undefined, { data }, true)\r\n      .map((datum: T[]) => datum.map((data: T) => this.model.factory(data)));\r\n  }\r\n  /**\r\n   * @method createMany\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type array\r\n   * @return\r\n   * @description\r\n   * Generic create many method\r\n   */\r\n  public createMany<T>(data: T[], customHeaders?: Function): Observable<T[]> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders)\r\n      .map((datum: T[]) => datum.map((data: T) => this.model.factory(data)));\r\n  }\r\n  /**\r\n   * @method onCreateMany\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type array\r\n   * @return\r\n   * @description\r\n   * Generic create many method\r\n   */\r\n  public onCreateMany<T>(data: T[]): Observable<T[]> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, undefined, { data }, true)\r\n      .map((datum: T[]) => datum.map((data: T) => this.model.factory(data)));\r\n  }\r\n  /**\r\n   * @method findById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @param data Generic data type\r\n   * @return\r\n   * @description\r\n   * Generic findById method\r\n   */\r\n  public findById<T>(id: any, filter: LoopBackFilter = {}, customHeaders?: Function): Observable<T> {\r\n    let _urlParams: any = {};\r\n    if (filter) _urlParams.filter = filter;\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, _urlParams, undefined, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method find\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic find method\r\n   */\r\n  public find<T>(filter: LoopBackFilter = {}, customHeaders?: Function): Observable<T[]> {\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path\r\n    ].join('/'), undefined, { filter }, undefined, null, customHeaders)\r\n      .map((datum: T[]) => datum.map((data: T) => this.model.factory(data)));\r\n  }\r\n  /**\r\n   * @method exists\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic exists method\r\n   */\r\n  public exists<T>(id: any, customHeaders?: Function): Observable<T> {\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id/exists'\r\n    ].join('/'), { id }, undefined, undefined, null, customHeaders);\r\n  }\r\n  /**\r\n   * @method findOne\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic findOne method\r\n   */\r\n  public findOne<T>(filter: LoopBackFilter = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'findOne'\r\n    ].join('/'), undefined, { filter }, undefined, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method updateAll\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic updateAll method\r\n   */\r\n  public updateAll<T>(where: any = {}, data: T, customHeaders?: Function): Observable<{ count: 'number' }> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'update'\r\n    ].join('/'), undefined, _urlParams, { data }, null, customHeaders);\r\n  }\r\n  /**\r\n   * @method onUpdateAll\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onUpdateAll method\r\n   */\r\n  public onUpdateAll<T>(where: any = {}, data: T): Observable<{ count: 'number' }> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'update'\r\n    ].join('/'), undefined, _urlParams, { data }, true);\r\n  }\r\n  /**\r\n   * @method deleteById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic deleteById method\r\n   */\r\n  public deleteById<T>(id: any, customHeaders?: Function): Observable<T> {\r\n    return this.request('DELETE', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, undefined, undefined, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onDeleteById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onDeleteById method\r\n   */\r\n  public onDeleteById<T>(id: any): Observable<T> {\r\n    return this.request('DELETE', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, undefined, undefined, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method count\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic count method\r\n   */\r\n  public count(where: any = {}, customHeaders?: Function): Observable<{ count: number }> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('GET', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'count'\r\n    ].join('/'), undefined, _urlParams, undefined, null, customHeaders);\r\n  }\r\n  /**\r\n   * @method updateAttributes\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic updateAttributes method\r\n   */\r\n  public updateAttributes<T>(id: any, data: T, customHeaders?: Function): Observable<T> {\r\n    return this.request('PUT', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onUpdateAttributes\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic onUpdateAttributes method\r\n   */\r\n  public onUpdateAttributes<T>(id: any, data: T): Observable<T> {\r\n    return this.request('PUT', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id'\r\n    ].join('/'), { id }, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method upsert\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic upsert method\r\n   */\r\n  public upsert<T>(data: any = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('PUT', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onUpsert\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onUpsert method\r\n   */\r\n  public onUpsert<T>(data: any = {}): Observable<T> {\r\n    return this.request('PUT', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n    ].join('/'), undefined, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method upsertPatch\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic upsert method using patch http method\r\n   */\r\n  public upsertPatch<T>(data: any = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('PATCH', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onUpsertPatch\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onUpsertPatch method using patch http method\r\n   */\r\n  public onUpsertPatch<T>(data: any = {}): Observable<T> {\r\n    return this.request('PATCH', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n    ].join('/'), undefined, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method upsertWithWhere\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic upsertWithWhere method\r\n   */\r\n  public upsertWithWhere<T>(where: any = {}, data: any = {}, customHeaders?: Function): Observable<T> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'upsertWithWhere'\r\n    ].join('/'), undefined, _urlParams, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onUpsertWithWhere\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic pubsub onUpsertWithWhere method\r\n   */\r\n  public onUpsertWithWhere<T>(where: any = {}, data: any = {}): Observable<T> {\r\n    let _urlParams: any = {};\r\n    if (where) _urlParams.where = where;\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'upsertWithWhere'\r\n    ].join('/'), undefined, _urlParams, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method replaceOrCreate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic replaceOrCreate method\r\n   */\r\n  public replaceOrCreate<T>(data: any = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'replaceOrCreate'\r\n    ].join('/'), undefined, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onReplaceOrCreate\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic onReplaceOrCreate method\r\n   */\r\n  public onReplaceOrCreate<T>(data: any = {}): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      'replaceOrCreate'\r\n    ].join('/'), undefined, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method replaceById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic replaceById method\r\n   */\r\n  public replaceById<T>(id: any, data: any = {}, customHeaders?: Function): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id', 'replace'\r\n    ].join('/'), { id }, undefined, { data }, null, customHeaders)\r\n      .map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method onReplaceById\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic onReplaceById method\r\n   */\r\n  public onReplaceById<T>(id: any, data: any = {}): Observable<T> {\r\n    return this.request('POST', [\r\n      LoopBackConfig.getPath(),\r\n      LoopBackConfig.getApiVersion(),\r\n      this.model.getModelDefinition().path,\r\n      ':id', 'replace'\r\n    ].join('/'), { id }, undefined, { data }, true).map((data: T) => this.model.factory(data));\r\n  }\r\n  /**\r\n   * @method createChangeStream\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Generic createChangeStream method\r\n   */\r\n  public createChangeStream(): Observable<any> {\r\n    let subject = new Subject();\r\n    if (typeof EventSource !== 'undefined') {\r\n      let emit = (msg: any) => subject.next(JSON.parse(msg.data));\r\n      var source = new EventSource([\r\n        LoopBackConfig.getPath(),\r\n        LoopBackConfig.getApiVersion(),\r\n        this.model.getModelDefinition().path,\r\n        'change-stream'\r\n      ].join('/'));\r\n      source.addEventListener('data', emit);\r\n      source.onerror = emit;\r\n    } else {\r\n      console.warn('SDK Builder: EventSource is not supported');\r\n    }\r\n    return subject.asObservable();\r\n  }\r\n  /**\r\n   * @method getModelName\r\n   * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n   * @license MIT\r\n   * @return\r\n   * @description\r\n   * Abstract getModelName method\r\n   */\r\n  abstract getModelName(): string;\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable, Inject, NgZone } from '@angular/core';\r\nimport { SocketDriver } from './socket.driver';\r\nimport { AccessToken } from '../models';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/share';\r\nimport { LoopBackConfig } from '../lb.config';\r\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\r\n* @module SocketConnection\r\n* @license MIT\r\n* @description\r\n* This module handle socket connections and return singleton instances for each\r\n* connection, it will use the SDK Socket Driver Available currently supporting\r\n* Angular 2 for web, NativeScript 2 and Angular Universal.\r\n**/\r\n@Injectable()\r\nexport class SocketConnection {\r\n  private socket: any;\r\n  private subjects: {\r\n    onConnect: Subject<any>,\r\n    onDisconnect: Subject<any>,\r\n    onAuthenticated: Subject<any>,\r\n    onUnAuthorized: Subject<any>\r\n  } = {\r\n    onConnect: new Subject(),\r\n    onDisconnect: new Subject(),\r\n    onAuthenticated: new Subject(),\r\n    onUnAuthorized: new Subject()\r\n  };\r\n  public sharedObservables: {\r\n    sharedOnConnect?: Observable<any>,\r\n    sharedOnDisconnect?: Observable<any>,\r\n    sharedOnAuthenticated?: Observable<any>,\r\n    sharedOnUnAuthorized?: Observable<any>\r\n  } = {};\r\n  public authenticated: boolean = false;\r\n  /**\r\n   * @method constructor\r\n   * @param driver Socket IO Driver\r\n   * @param zone Angular 2 Zone\r\n   * @description\r\n   * The constructor will set references for the shared hot observables from\r\n   * the class subjects. Then it will subscribe each of these observables\r\n   * that will create a channel that later will be shared between subscribers.\r\n   **/\r\n  constructor(\r\n    @Inject(SocketDriver) private driver: SocketDriver,\r\n    @Inject(NgZone) private zone: NgZone\r\n  ) {\r\n    this.sharedObservables = {\r\n      sharedOnConnect: this.subjects.onConnect.asObservable().share(),\r\n      sharedOnDisconnect: this.subjects.onDisconnect.asObservable().share(),\r\n      sharedOnAuthenticated: this.subjects.onAuthenticated.asObservable().share(),\r\n      sharedOnUnAuthorized: this.subjects.onUnAuthorized.asObservable().share()\r\n    };\r\n    // This is needed to create the first channel, subsequents will share the connection\r\n    // We are using Hot Observables to avoid duplicating connection status events.\r\n    this.sharedObservables.sharedOnConnect.subscribe();\r\n    this.sharedObservables.sharedOnDisconnect.subscribe();\r\n    this.sharedObservables.sharedOnAuthenticated.subscribe();\r\n    this.sharedObservables.sharedOnUnAuthorized.subscribe();\r\n  }\r\n  /**\r\n   * @method connect\r\n   * @param token AccesToken instance\r\n   * @return\r\n   * @description\r\n   * This method will create a new socket connection when not previously established.\r\n   * If there is a broken connection it will re-connect.\r\n   **/\r\n  public connect(token: AccessToken = null): void {\r\n    if (!this.socket) {\r\n      console.info('Creating a new connection with: ', LoopBackConfig.getPath());\r\n      // Create new socket connection\r\n      this.socket = this.driver.connect(LoopBackConfig.getPath(), {\r\n        log: false,\r\n        secure: LoopBackConfig.isSecureWebSocketsSet(),\r\n        forceNew: true,\r\n        forceWebsockets: true,\r\n        transports: ['websocket']\r\n      });\r\n      // Listen for connection\r\n      this.on('connect', () => {\r\n        this.subjects.onConnect.next('connected');\r\n        // Authenticate or start heartbeat now    \r\n        this.emit('authentication', token);\r\n      });\r\n      // Listen for authentication\r\n      this.on('authenticated', () => {\r\n        this.authenticated = true;\r\n        this.subjects.onAuthenticated.next();\r\n        this.heartbeater();\r\n      })\r\n      // Listen for authentication\r\n      this.on('unauthorized', (err: any) => {\r\n        this.authenticated = false;\r\n        this.subjects.onUnAuthorized.next(err);\r\n      })\r\n      // Listen for disconnections\r\n      this.on('disconnect', (status: any) => this.subjects.onDisconnect.next(status));\r\n    } else if (this.socket && !this.socket.connected){\r\n      if (typeof this.socket.off === 'function') {\r\n        this.socket.off();\r\n      }\r\n      if (typeof this.socket.destroy === 'function') {\r\n        this.socket.destroy();\r\n      }\r\n      delete this.socket;\r\n      this.connect(token);\r\n    }\r\n  }\r\n  /**\r\n   * @method isConnected\r\n   * @return\r\n   * @description\r\n   * This method will return true or false depending on established connections\r\n   **/\r\n  public isConnected(): boolean {\r\n    return (this.socket && this.socket.connected);\r\n  }\r\n  /**\r\n   * @method on\r\n   * @param event Event name\r\n   * @param handler Event listener handler\r\n   * @return\r\n   * @description\r\n   * This method listen for server events from the current WebSocket connection.\r\n   * This method is a facade that will wrap the original \"on\" method and run it\r\n   * within the Angular Zone to avoid update issues.\r\n   **/\r\n  public on(event: string, handler: Function): void {\r\n    this.socket.on(event, (data: any) => this.zone.run(() => handler(data)));\r\n  }\r\n  /**\r\n   * @method emit\r\n   * @param event Event name\r\n   * @param data Any type of data\r\n   * @return\r\n   * @description\r\n   * This method will send any type of data to the server according the event set.\r\n   **/\r\n  public emit(event: string, data?: any): void {\r\n    if (data) {\r\n      this.socket.emit(event, data);\r\n    } else {\r\n      this.socket.emit(event);\r\n    }\r\n  }\r\n  /**\r\n   * @method removeListener\r\n   * @param event Event name\r\n   * @param handler Event listener handler\r\n   * @return\r\n   * @description\r\n   * This method will wrap the original \"on\" method and run it within the Angular Zone\r\n   * Note: off is being used since the nativescript socket io client does not provide\r\n   * removeListener method, but only provides with off which is provided in any platform.\r\n   **/\r\n  public removeListener(event: string, handler: Function): void {\r\n    if (typeof this.socket.off === 'function') {\r\n      this.socket.off(event, handler);\r\n    }\r\n  }\r\n  /**\r\n   * @method removeAllListeners\r\n   * @param event Event name\r\n   * @param handler Event listener handler\r\n   * @return\r\n   * @description\r\n   * This method will wrap the original \"on\" method and run it within the Angular Zone\r\n   * Note: off is being used since the nativescript socket io client does not provide\r\n   * removeListener method, but only provides with off which is provided in any platform.\r\n   **/\r\n  public removeAllListeners(event: string): void {\r\n    if (typeof this.socket.removeAllListeners === 'function') {\r\n      this.socket.removeAllListeners(event);\r\n    }\r\n  }\r\n  /**\r\n   * @method disconnect\r\n   * @return\r\n   * @description\r\n   * This will disconnect the client from the server\r\n   **/\r\n  public disconnect(): void {\r\n    this.socket.disconnect();\r\n  }\r\n  /**\r\n   * @method heartbeater\r\n   * @return\r\n   * @description\r\n   * This will keep the connection as active, even when users are not sending\r\n   * data, this avoids disconnection because of a connection not being used.\r\n   **/\r\n  private heartbeater(): void {\r\n    let heartbeater: any = setInterval(() => {\r\n      if (this.isConnected()) {\r\n        this.socket.emit('lb-ping');\r\n      } else {\r\n        this.socket.removeAllListeners('lb-pong');\r\n        clearInterval(heartbeater);\r\n      }\r\n    }, 15000);\r\n    this.socket.on('lb-pong', (data: any) => console.info('Heartbeat: ', data));\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n/**\r\n * @module SocketDriver\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * The SocketDriver class is used for dependency injection swapping.\r\n * It will be provided using factory method from different sources.\r\n **/\r\nexport class SocketDriver {\r\n  connect(url: any, options: any) {}\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { User } from '../../models/User';\r\nimport { Admin } from '../../models/Admin';\r\n\r\nexport interface Models { [name: string]: any }\r\n\r\n@Injectable()\r\nexport class SDKModels {\r\n\r\n  private models: Models = {\r\n    User: User,\r\n    Admin: Admin\r\n  };\r\n\r\n  public get(modelName: string): any {\r\n    return this.models[modelName];\r\n  }\r\n\r\n  public getAll(): Models {\r\n    return this.models;\r\n  }\r\n\r\n  public getModelNames(): string[] {\r\n    return Object.keys(this.models);\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n/**\r\n* @module LoopBackConfig\r\n* @description\r\n*\r\n* The LoopBackConfig module help developers to externally \r\n* configure the base url and api version for loopback.io\r\n*\r\n* Example\r\n*\r\n* import { LoopBackConfig } from './sdk';\r\n* \r\n* @Component() // No metadata needed for this module\r\n*\r\n* export class MyApp {\r\n*   constructor() {\r\n*     LoopBackConfig.setBaseURL('http://localhost:3000');\r\n*     LoopBackConfig.setApiVersion('api');\r\n*   }\r\n* }\r\n**/\r\nexport class LoopBackConfig {\r\n  private static path: string = '//0.0.0.0:3000';\r\n  private static version: string | number = 'api';\r\n  private static authPrefix: string = '';\r\n  private static debug: boolean = true;\r\n  private static filterOn: string = 'headers';\r\n  private static secure: boolean = false;\r\n  private static withCredentials: boolean = false;\r\n\r\n  public static setApiVersion(version: string = 'api'): void {\r\n    LoopBackConfig.version = version;\r\n  }\r\n  \r\n  public static getApiVersion(): string | number {\r\n    return LoopBackConfig.version;\r\n  }\r\n\r\n  public static setBaseURL(url: string = '/'): void {\r\n    LoopBackConfig.path = url;\r\n  }\r\n  \r\n  public static getPath(): string {\r\n    return LoopBackConfig.path;\r\n  }\r\n\r\n  public static setAuthPrefix(authPrefix: string = ''): void {\r\n    LoopBackConfig.authPrefix = authPrefix;\r\n  }\r\n\r\n  public static getAuthPrefix(): string {\r\n    return LoopBackConfig.authPrefix;\r\n  }\r\n\r\n  public static setDebugMode(isEnabled: boolean): void {\r\n    LoopBackConfig.debug = isEnabled;\r\n  }\r\n\r\n  public static debuggable(): boolean {\r\n    return LoopBackConfig.debug;\r\n  }\r\n\r\n  public static filterOnUrl(): void {\r\n    LoopBackConfig.filterOn = 'url';\r\n  }\r\n\r\n  public static filterOnHeaders(): void {\r\n    LoopBackConfig.filterOn = 'headers';\r\n  }\r\n\r\n  public static isHeadersFilteringSet(): boolean {\r\n    return (LoopBackConfig.filterOn === 'headers');\r\n  }\r\n\r\n  public static setSecureWebSockets(): void {\r\n    LoopBackConfig.secure = true;\r\n  }\r\n\r\n  public static unsetSecureWebSockets(): void {\r\n    LoopBackConfig.secure = false;\r\n  }\r\n\r\n  public static isSecureWebSocketsSet(): boolean {\r\n    return LoopBackConfig.secure;\r\n  }\r\n\r\n  public static setRequestOptionsCredentials(withCredentials: boolean = false): void {\r\n    LoopBackConfig.withCredentials = withCredentials;\r\n  }\r\n\r\n  public static getRequestOptionsCredentials(): boolean {\r\n    return LoopBackConfig.withCredentials;\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { URLSearchParams } from '@angular/http';\r\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\r\n* @module JSONSearchParams\r\n* @license MIT\r\n* @description\r\n* JSON Parser and Wrapper for the Angular2 URLSearchParams\r\n* This module correctly encodes a json object into a query string and then creates\r\n* an instance of the URLSearchParams component for later use in HTTP Calls\r\n**/\r\n@Injectable()\r\nexport class JSONSearchParams {\r\n\r\n    private _usp: URLSearchParams;\r\n\r\n    public setJSON(obj: any) {\r\n        this._usp = new URLSearchParams(this._JSON2URL(obj, false));\r\n    }\r\n\r\n    public getURLSearchParams(): URLSearchParams {\r\n        return this._usp;\r\n    }\r\n\r\n    private _JSON2URL(obj: any, parent: any) {\r\n        var parts: any = [];\r\n        for (var key in obj)\r\n        parts.push(this._parseParam(key, obj[key], parent));\r\n        return parts.join('&');\r\n    }\r\n\r\n    private _parseParam(key: string, value: any, parent: string) {\r\n        let processedKey = parent ? parent + '[' + key + ']' : key;\r\n        if (value && (<string>(typeof value) === 'object' || Array.isArray(value))) {\r\n            return this._JSON2URL(value, processedKey);\r\n        }\r\n        return processedKey + '=' + value;\r\n    }\r\n}\r\n",
    "/* tslint:disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\n//import { ErrorObservable } from 'rxjs/observable/ErrorObservable';\r\nimport 'rxjs/add/observable/throw';\r\n/**\r\n * Default error handler\r\n */\r\n@Injectable()\r\nexport class ErrorHandler {\r\n  // ErrorObservable when rxjs version < rc.5\r\n  // ErrorObservable<string> when rxjs version = rc.5\r\n  // I'm leaving any for now to avoid breaking apps using both versions\r\n  public handleError(error: Response): any {\r\n    return Observable.throw(error.json().error || 'Server error');\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\ndeclare var Object: any;\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { InternalStorage } from '../../storage/storage.swaps';\r\nimport { SDKToken } from '../../models/BaseModels';\r\n/**\r\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\r\n* @module SocketConnection\r\n* @license MIT\r\n* @description\r\n* This module handle socket connections and return singleton instances for each\r\n* connection, it will use the SDK Socket Driver Available currently supporting\r\n* Angular 2 for web, NativeScript 2 and Angular Universal.\r\n**/\r\n@Injectable()\r\nexport class LoopBackAuth {\r\n  /**\r\n   * \r\n   **/\r\n  private token: SDKToken = new SDKToken();\r\n  /**\r\n   * \r\n   **/\r\n  protected prefix: string = '$LoopBackSDK$';\r\n  /**\r\n   * @method constructor\r\n   * @param storage Internal Storage Driver\r\n   * @description\r\n   * The constructor will initialize the token loading data from storage\r\n   **/\r\n  constructor(@Inject(InternalStorage) protected storage: InternalStorage) {\r\n    this.token.id = this.load('id');\r\n    this.token.user = this.load('user');\r\n    this.token.userId = this.load('userId');\r\n    this.token.created = this.load('created');\r\n    this.token.ttl = this.load('ttl');\r\n    this.token.rememberMe = this.load('rememberMe');\r\n  }\r\n  /**\r\n   * @method setRememberMe\r\n   * @param value Flag to remember credentials\r\n   * @return\r\n   * @description\r\n   * This method will set a flag in order to remember the current credentials\r\n   **/\r\n  public setRememberMe(value: boolean): void {\r\n    this.token.rememberMe = value;\r\n  }\r\n  /**\r\n   * @method setUser\r\n   * @param user Any type of user model\r\n   * @return\r\n   * @description\r\n   * This method will update the user information and persist it if the\r\n   * rememberMe flag is set.\r\n   **/\r\n  public setUser(user: any) {\r\n    this.token.user = user;\r\n    this.save();\r\n  }\r\n  /**\r\n   * @method setToken\r\n   * @param token SDKToken or casted AccessToken instance\r\n   * @return\r\n   * @description\r\n   * This method will set a flag in order to remember the current credentials\r\n   **/\r\n  public setToken(token: SDKToken): void {\r\n    this.token = Object.assign({}, this.token, token);\r\n    this.save();\r\n  }\r\n  /**\r\n   * @method getToken\r\n   * @return\r\n   * @description\r\n   * This method will set a flag in order to remember the current credentials.\r\n   **/\r\n  public getToken(): SDKToken {\r\n    return <SDKToken>this.token;\r\n  }\r\n  /**\r\n   * @method getAccessTokenId\r\n   * @return\r\n   * @description\r\n   * This method will return the actual token string, not the object instance.\r\n   **/\r\n  public getAccessTokenId(): string {\r\n    return this.token.id;\r\n  }\r\n  /**\r\n   * @method getCurrentUserId\r\n   * @return\r\n   * @description\r\n   * This method will return the current user id, it can be number or string.\r\n   **/\r\n  public getCurrentUserId(): any {\r\n    return this.token.userId;\r\n  }\r\n  /**\r\n   * @method getCurrentUserData\r\n   * @return\r\n   * @description\r\n   * This method will return the current user instance.\r\n   **/\r\n  public getCurrentUserData(): any {\r\n    return (typeof this.token.user === 'string') ? JSON.parse(this.token.user) : this.token.user;\r\n  }\r\n  /**\r\n   * @method save\r\n   * @return Whether or not the information was saved\r\n   * @description\r\n   * This method will save in either local storage or cookies the current credentials.\r\n   * But only if rememberMe is enabled.\r\n   **/\r\n  public save(): boolean {\r\n      let today = new Date();\r\n      let expires = new Date(today.getTime() + (this.token.ttl * 1000));\r\n      this.persist('id', this.token.id, expires);\r\n      this.persist('user', this.token.user, expires);\r\n      this.persist('userId', this.token.userId, expires);\r\n      this.persist('created', this.token.created, expires);\r\n      this.persist('ttl', this.token.ttl, expires);\r\n      this.persist('rememberMe', this.token.rememberMe, expires);\r\n      return true;\r\n  };\r\n  /**\r\n   * @method load\r\n   * @param prop Property name\r\n   * @return Any information persisted in storage\r\n   * @description\r\n   * This method will load either from local storage or cookies the provided property.\r\n   **/\r\n  protected load(prop: string): any {\r\n    return this.storage.get(`${this.prefix}${prop}`);\r\n  }\r\n  /**\r\n   * @method clear\r\n   * @return\r\n   * @description\r\n   * This method will clear cookies or the local storage.\r\n   **/\r\n  public clear(): void {\r\n    Object.keys(this.token).forEach((prop: string) => this.storage.remove(`${this.prefix}${prop}`));\r\n    this.token = new SDKToken();\r\n  }\r\n  /**\r\n   * @method persist\r\n   * @return\r\n   * @description\r\n   * This method saves values to storage\r\n   **/\r\n  protected persist(prop: string, value: any, expires?: Date): void {\r\n    try {\r\n      this.storage.set(\r\n        `${this.prefix}${prop}`,\r\n        (typeof value === 'object') ? JSON.stringify(value) : value,\r\n        this.token.rememberMe?expires:null\r\n      );\r\n    }\r\n    catch (err) {\r\n      console.error('Cannot access local/session storage:', err);\r\n    }\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n/**\r\n * @module Storage\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * The InternalStorage class is used for dependency injection swapping.\r\n * It will be provided using factory method from different sources.\r\n **/\r\nexport class BaseStorage {\r\n  /**\r\n   * @method get\r\n   * @param  key Storage key name\r\n   * @return\r\n   * @description\r\n   * The getter will return any type of data persisted in storage.\r\n   **/\r\n  get(key: string): any {}\r\n  /**\r\n   * @method set\r\n   * @param  key Storage key name\r\n   * @param value Any value\r\n   * @return\r\n   * @description\r\n   * The setter will return any type of data persisted in localStorage.\r\n   **/\r\n  set(key: string, value: any, expires?: Date): void {}\r\n  /**\r\n   * @method remove\r\n   * @param key Storage key name\r\n   * @return\r\n   * @description\r\n   * This method will remove a localStorage item from the client.\r\n   **/\r\n  remove(key: string): void {}\r\n}\r\n/**\r\n * @module InternalStorage\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * The InternalStorage class is used for dependency injection swapping.\r\n * It will be provided using factory method from different sources.\r\n * This is mainly required because Angular Universal integration.\r\n * It does inject a CookieStorage instead of LocalStorage.\r\n **/\r\nexport class InternalStorage extends BaseStorage {}\r\n/**\r\n * @module SDKStorage\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * The SDKStorage class is used for dependency injection swapping.\r\n * It will be provided using factory method according the right environment.\r\n * This is created for public usage, to allow persisting custom data\r\n * Into the local storage API.\r\n **/\r\nexport class SDKStorage extends BaseStorage {}\r\n",
    "/* tslint:disable */\r\nimport 'rxjs/add/observable/merge';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/merge';\r\nimport { LoopBackFilter, StatFilter } from './index';\r\nimport { SocketConnection } from '../sockets/socket.connections';\r\n/**\r\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\r\n * @license MIT\r\n * @description\r\n * This class allows to create FireLoop References which will be in sync with\r\n * Server. It also allows to create FireLoop Reference Childs, that allows to\r\n * persist data according the generic model relationships.\r\n **/\r\nexport class FireLoopRef<T> {\r\n  // Reference ID\r\n  private id: number = this.buildId();\r\n  // Model Instance (For child references, empty on root references)\r\n  private instance: any;\r\n  // Model Childs\r\n  private childs: any = {};\r\n  // Disposable Events\r\n  private disposable: { [key: string]: any } = {};\r\n  /**\r\n  * @method constructor\r\n  * @param model The model we want to create a reference\r\n  * @param socket Socket connection to handle events\r\n  * @param parent Parent FireLoop model reference\r\n  * @param relationship The defined model relationship\r\n  * @description\r\n  * The constructor will receive the required parameters and then will register this reference\r\n  * into the server, needed to allow multiple references for the same model.\r\n  * This ids are referenced into this specific client connection and won't have issues\r\n  * with other client ids.\r\n  **/\r\n  constructor(\r\n    private model: any,\r\n    private socket: SocketConnection,\r\n    private parent: FireLoopRef<any> = null,\r\n    private relationship: string = null\r\n  ) {\r\n    this.socket.emit(\r\n      `Subscribe.${!parent ? model.getModelName() : parent.model.getModelName()}`,\r\n      { id: this.id, scope: model.getModelName(), relationship: relationship }\r\n    );\r\n    return this;\r\n  }\r\n  /**\r\n  * @method dispose\r\n  * @return\r\n  * @description\r\n  * This method is super important to avoid memory leaks in the server.\r\n  * This method requires to be called on components destroy\r\n  *\r\n  * ngOnDestroy() {\r\n  *  this.someRef.dispose() \r\n  * }\r\n  **/\r\n  public dispose(): void {\r\n    const subscription = this.operation('dispose', {}).subscribe(() => {\r\n      Object.keys(this.disposable).forEach((channel: string) => {\r\n        this.socket.removeListener(channel, this.disposable[channel]);\r\n        this.socket.removeAllListeners(channel);\r\n      });\r\n      subscription.unsubscribe();\r\n    });\r\n  }\r\n  /**\r\n  * @method upsert\r\n  * @param data Persisted model instance\r\n  * @return\r\n  * @description\r\n  * Operation wrapper for upsert function.\r\n  **/\r\n  public upsert(data: T): Observable<T> {\r\n    return this.operation('upsert', data);\r\n  }\r\n  /**\r\n  * @method create\r\n  * @param data Persisted model instance\r\n  * @return\r\n  * @description\r\n  * Operation wrapper for create function.\r\n  **/\r\n  public create(data: T): Observable<T> {\r\n    return this.operation('create', data);\r\n  }\r\n  /**\r\n  * @method remove\r\n  * @param data Persisted model instance\r\n  * @return\r\n  * @description\r\n  * Operation wrapper for remove function.\r\n  **/\r\n  public remove(data: T): Observable<T> {\r\n    return this.operation('remove', data);\r\n  }\r\n  /**\r\n  * @method remote\r\n  * @param method Remote method name\r\n  * @param params Parameters to be applied into the remote method\r\n  * @param broadcast Flag to define if the method results should be broadcasted\r\n  * @return\r\n  * @description\r\n  * This method calls for any remote method. It is flexible enough to\r\n  * allow you call either built-in or custom remote methods.\r\n  *\r\n  * FireLoop provides this interface to enable calling remote methods\r\n  * but also to optionally send any defined accept params that will be\r\n  * applied within the server.\r\n  **/\r\n  public remote(method: string, params?: any[], broadcast: boolean = false): Observable<any> {\r\n    return this.operation('remote', { method, params, broadcast });\r\n  }\r\n  /**\r\n  * @method onRemote\r\n  * @param method Remote method name\r\n  * @return\r\n  * @description\r\n  * This method listen for public broadcasted remote method results. If the remote method\r\n  * execution is not public only the owner will receive the result data.\r\n  **/\r\n  public onRemote(method: string): Observable<any> {\r\n    let event: string = 'remote';\r\n    if (!this.relationship) {\r\n      event = `${this.model.getModelName()}.${event}`;\r\n    } else {\r\n      event = `${this.parent.model.getModelName()}.${this.relationship}.${event}`;\r\n    }\r\n    return this.broadcasts(event, {});\r\n  }\r\n  /**\r\n  * @method on\r\n  * @param event Event name\r\n  * @param filter LoopBack query filter\r\n  * @return\r\n  * @description\r\n  * Listener for different type of events. Valid events are:\r\n  *   - change (Triggers on any model change -create, update, remove-)\r\n  *   - value (Triggers on new entries)\r\n  *   - child_added (Triggers when a child is added)\r\n  *   - child_updated (Triggers when a child is updated)\r\n  *   - child_removed (Triggers when a child is removed)\r\n  **/\r\n  public on(event: string, filter: LoopBackFilter = { limit: 100, order: 'id DESC' }): Observable<T | T[]> {\r\n    if (event === 'remote') {\r\n      throw new Error('The \"remote\" event is not allowed using \"on()\" method, use \"onRemote()\" instead');\r\n    }\r\n    let request: any;\r\n    if (!this.relationship) {\r\n      event = `${this.model.getModelName()}.${event}`;\r\n      request = { filter };\r\n    } else {\r\n      event = `${this.parent.model.getModelName()}.${this.relationship}.${event}`;\r\n      request = { filter, parent: this.parent.instance };\r\n    }\r\n    if (event.match(/(value|change|stats)/)) {\r\n      return Observable.merge(\r\n        this.pull(event, request),\r\n        this.broadcasts(event, request)\r\n      );\r\n    } else {\r\n      return this.broadcasts(event, request);\r\n    }\r\n  }\r\n  /**\r\n  * @method stats\r\n  * @param filter LoopBack query filter\r\n  * @return\r\n  * @description\r\n  * Listener for real-time statistics, will trigger on every\r\n  * statistic modification.\r\n  * TIP: You can improve performance by adding memcached to LoopBack models.\r\n  **/\r\n  public stats(filter?: StatFilter): Observable<T | T[]> {\r\n    return this.on('stats', filter);\r\n  }\r\n  /**\r\n  * @method make\r\n  * @param instance Persisted model instance reference\r\n  * @return\r\n  * @description\r\n  * This method will set a model instance into this a new FireLoop Reference.\r\n  * This allows to persiste parentship when creating related instances.\r\n  *\r\n  * It also allows to have multiple different persisted instance references to same model.\r\n  * otherwise if using singleton will replace a previous instance for a new instance, when\r\n  * we actually want to have more than 1 instance of same model.\r\n  **/\r\n  public make(instance: any): FireLoopRef<T> {\r\n    let reference: FireLoopRef<T> = new FireLoopRef<T>(this.model, this.socket);\r\n    reference.instance = instance;\r\n    return reference;\r\n  }\r\n  /**\r\n  * @method child\r\n  * @param relationship A defined model relationship\r\n  * @return\r\n  * @description\r\n  * This method creates child references, which will persist related model\r\n  * instances. e.g. Room.messages, where messages belongs to a specific Room.\r\n  **/\r\n  public child<T>(relationship: string): FireLoopRef<T> {\r\n    // Return singleton instance\r\n    if (this.childs[relationship]) { return this.childs[relationship]; }\r\n    // Try to get relation settings from current model\r\n    let settings: any = this.model.getModelDefinition().relations[relationship];\r\n    // Verify the relationship actually exists\r\n    if (!settings) {\r\n      throw new Error(`Invalid model relationship ${this.model.getModelName()} <-> ${relationship}, verify your model settings.`);\r\n    }\r\n    // Verify if the relationship model is public\r\n    if (settings.model === '') {\r\n      throw new Error(`Relationship model is private, cam't use ${relationship} unless you set your model as public.`);\r\n    }\r\n    // Lets get a model reference and add a reference for all of the models\r\n    let model: any = this.model.models.get(settings.model);\r\n    model.models = this.model.models;\r\n    // If everything goes well, we will store a child reference and return it.\r\n    this.childs[relationship] = new FireLoopRef<T>(model, this.socket, this, relationship);\r\n    return this.childs[relationship];\r\n  }\r\n  /**\r\n  * @method pull\r\n  * @param event Event name\r\n  * @param request Type of request, can be LB-only filter or FL+LB filter\r\n  * @return\r\n  * @description\r\n  * This method will pull initial data from server\r\n  **/\r\n  private pull(event: string, request: any): Observable<T> {\r\n    let sbj: Subject<T> = new Subject<T>();\r\n    let that: FireLoopRef<T> = this;\r\n    let nowEvent: any = `${event}.pull.requested.${this.id}`;\r\n    this.socket.emit(`${event}.pull.request.${this.id}`, request);\r\n    function pullNow(data: any) {\r\n      if (that.socket.removeListener) {\r\n        that.socket.removeListener(nowEvent, pullNow);\r\n      }\r\n      sbj.next(data);\r\n    };\r\n    this.socket.on(nowEvent, pullNow);\r\n    return sbj.asObservable();\r\n  }\r\n  /**\r\n  * @method broadcasts\r\n  * @param event Event name\r\n  * @param request Type of request, can be LB-only filter or FL+LB filter\r\n  * @return\r\n  * @description\r\n  * This will listen for public broadcasts announces and then request\r\n  * for data according a specific client request, not shared with other clients.\r\n  **/\r\n  private broadcasts(event: string, request: any): Observable<T> {\r\n    let sbj: Subject<T> = new Subject<T>();\r\n    let channels: { announce: string, broadcast: string } = {\r\n      announce: `${event}.broadcast.announce.${this.id}`,\r\n      broadcast: `${event}.broadcast.${this.id}`\r\n    };\r\n    let that = this;\r\n    // Announces Handler\r\n    this.disposable[channels.announce] = function (res: T) {\r\n      that.socket.emit(`${event}.broadcast.request.${that.id}`, request)\r\n    };\r\n    // Broadcasts Handler\r\n    this.disposable[channels.broadcast] = function (data: any) {\r\n      sbj.next(data);\r\n    };\r\n    this.socket.on(channels.announce, this.disposable[channels.announce]);\r\n    this.socket.on(channels.broadcast, this.disposable[channels.broadcast]);\r\n    return sbj.asObservable();\r\n  }\r\n  /**\r\n  * @method operation\r\n  * @param event Event name\r\n  * @param data Any type of data sent to the server\r\n  * @return\r\n  * @description\r\n  * This internal method will run operations depending on current context \r\n  **/\r\n  private operation(event: string, data: any): Observable<T> {\r\n    if (!this.relationship) {\r\n      event = `${this.model.getModelName()}.${event}.${this.id}`;\r\n    } else {\r\n      event = `${this.parent.model.getModelName()}.${this.relationship}.${event}.${this.id}`;\r\n    }\r\n    let subject: Subject<T> = new Subject<T>();\r\n    let config: { data: any, parent: any } = {\r\n      data,\r\n      parent: this.parent && this.parent.instance ? this.parent.instance : null\r\n    };\r\n    this.socket.emit(event, config);\r\n    let resultEvent: string = '';\r\n    if (!this.relationship) {\r\n      resultEvent = `${this.model.getModelName()}.value.result.${this.id}`;\r\n    } else {\r\n      resultEvent = `${this.parent.model.getModelName()}.${this.relationship}.value.result.${this.id}`;\r\n    }\r\n    this.socket.on(resultEvent, (res: any) => {\r\n      if (res.error) {\r\n        subject.error(res);\r\n      } else {\r\n        subject.next(res);\r\n      }\r\n    });\r\n    if (event.match('dispose')) {\r\n      setTimeout(() => subject.next());\r\n    }\r\n    // This event listener will be wiped within socket.connections\r\n    this.socket.sharedObservables.sharedOnDisconnect.subscribe(() => subject.complete());\r\n    return subject.asObservable().catch((error: any) => Observable.throw(error));\r\n  }\r\n  /**\r\n  * @method buildId\r\n  * @return\r\n  * @description\r\n  * This internal method build an ID for this reference, this allows to have\r\n  * multiple references for the same model or relationships.\r\n  **/\r\n  private buildId(): number {\r\n    return Date.now() + Math.floor(Math.random() * 100800) *\r\n      Math.floor(Math.random() * 100700) *\r\n      Math.floor(Math.random() * 198500);\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n\r\n\r\n\r\ndeclare var Object: any;\r\nexport interface LoopBackFilter {\r\n  fields?: any;\r\n  include?: any;\r\n  limit?: any;\r\n  order?: any;\r\n  skip?: any;\r\n  offset?: any;\r\n  where?: any;\r\n}\r\n\r\nexport interface AccessTokenInterface {\r\n  \"id\"?: string;\r\n  \"ttl\"?: number;\r\n  \"scopes\"?: [\"string\"];\r\n  \"created\"?: Date;\r\n  \"userId\"?: string;\r\n  \"user\"?: any;\r\n}\r\n\r\nexport class AccessToken implements AccessTokenInterface {\r\n  \"id\": string;\r\n  \"ttl\": number;\r\n  \"scopes\": [\"string\"];\r\n  \"created\": Date;\r\n  \"userId\": string;\r\n  \"user\": any;\r\n  constructor(data?: AccessTokenInterface) {\r\n    Object.assign(this, data);\r\n  }\r\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `AccessToken`.\r\n   */\r\n  public static getModelName() {\r\n    return \"AccessToken\";\r\n  }\r\n  /**\r\n  * @method factory\r\n  * @author Jonathan Casarrubias\r\n  * @license MIT\r\n  * This method creates an instance of AccessToken for dynamic purposes.\r\n  **/\r\n  public static factory(data: AccessTokenInterface): AccessToken{\r\n    return new AccessToken(data);\r\n  }  \r\n  /**\r\n  * @method getModelDefinition\r\n  * @author Julien Ledun\r\n  * @license MIT\r\n  * This method returns an object that represents some of the model\r\n  * definitions.\r\n  **/\r\n  public static getModelDefinition() {\r\n    return {\r\n      name: 'AccessToken',\r\n      plural: 'AccessTokens',\r\n      properties: {\r\n        \"id\": {\r\n          name: 'id',\r\n          type: 'string'\r\n        },\r\n        \"ttl\": {\r\n          name: 'ttl',\r\n          type: 'number',\r\n          default: 1209600\r\n        },\r\n        \"scopes\": {\r\n          name: 'scopes',\r\n          type: '[\"string\"]'\r\n        },\r\n        \"created\": {\r\n          name: 'created',\r\n          type: 'Date'\r\n        },\r\n        \"userId\": {\r\n          name: 'userId',\r\n          type: 'string'\r\n        },\r\n      },\r\n      relations: {\r\n        user: {\r\n          name: 'user',\r\n          type: 'User',\r\n          model: 'User'\r\n        },\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class SDKToken implements AccessTokenInterface {\r\n  id: any = null;\r\n  ttl: number = null;\r\n  scopes: any = null;\r\n  created: any = null;\r\n  userId: any = null;\r\n  user: any = null;\r\n  rememberMe: boolean = null;\r\n  constructor(data?: AccessTokenInterface) {\r\n    Object.assign(this, data);\r\n  }\r\n}\r\n/**\r\n* This GeoPoint represents both, LoopBack and MongoDB GeoPoint\r\n**/\r\nexport interface GeoPoint  {\r\n    lat?: number;\r\n    lng?: number;\r\n    type?: string;\r\n    coordinates?: number[];\r\n}\r\n\r\nexport interface StatFilter {\r\n    range: string,\r\n    custom?: {\r\n      start: string,\r\n      end: string\r\n    },\r\n    where?: {},\r\n    groupBy?: string\r\n}\r\n",
    "/* tslint:disable */\r\n\r\ndeclare var Object: any;\r\nexport interface AdminInterface {\r\n  \"realm\"?: string;\r\n  \"username\"?: string;\r\n  \"email\": string;\r\n  \"emailVerified\"?: boolean;\r\n  \"id\"?: any;\r\n  \"password\"?: string;\r\n  accessTokens?: any[];\r\n}\r\n\r\nexport class Admin implements AdminInterface {\r\n  \"realm\": string;\r\n  \"username\": string;\r\n  \"email\": string;\r\n  \"emailVerified\": boolean;\r\n  \"id\": any;\r\n  \"password\": string;\r\n  accessTokens: any[];\r\n  constructor(data?: AdminInterface) {\r\n    Object.assign(this, data);\r\n  }\r\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `Admin`.\r\n   */\r\n  public static getModelName() {\r\n    return \"Admin\";\r\n  }\r\n  /**\r\n  * @method factory\r\n  * @author Jonathan Casarrubias\r\n  * @license MIT\r\n  * This method creates an instance of Admin for dynamic purposes.\r\n  **/\r\n  public static factory(data: AdminInterface): Admin{\r\n    return new Admin(data);\r\n  }\r\n  /**\r\n  * @method getModelDefinition\r\n  * @author Julien Ledun\r\n  * @license MIT\r\n  * This method returns an object that represents some of the model\r\n  * definitions.\r\n  **/\r\n  public static getModelDefinition() {\r\n    return {\r\n      name: 'Admin',\r\n      plural: 'Admins',\r\n      path: 'Admins',\r\n      idName: 'id',\r\n      properties: {\r\n        \"realm\": {\r\n          name: 'realm',\r\n          type: 'string'\r\n        },\r\n        \"username\": {\r\n          name: 'username',\r\n          type: 'string'\r\n        },\r\n        \"email\": {\r\n          name: 'email',\r\n          type: 'string'\r\n        },\r\n        \"emailVerified\": {\r\n          name: 'emailVerified',\r\n          type: 'boolean'\r\n        },\r\n        \"id\": {\r\n          name: 'id',\r\n          type: 'any'\r\n        },\r\n        \"password\": {\r\n          name: 'password',\r\n          type: 'string'\r\n        },\r\n      },\r\n      relations: {\r\n        accessTokens: {\r\n          name: 'accessTokens',\r\n          type: 'any[]',\r\n          model: '',\r\n          relationType: 'hasMany',\r\n                  keyFrom: 'id',\r\n          keyTo: 'userId'\r\n        },\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "/* tslint:disable */\r\n\r\ndeclare var Object: any;\r\nexport interface UserInterface {\r\n  \"realm\"?: string;\r\n  \"username\"?: string;\r\n  \"email\": string;\r\n  \"emailVerified\"?: boolean;\r\n  \"id\"?: any;\r\n  \"password\"?: string;\r\n  accessTokens?: any[];\r\n}\r\n\r\nexport class User implements UserInterface {\r\n  \"realm\": string;\r\n  \"username\": string;\r\n  \"email\": string;\r\n  \"emailVerified\": boolean;\r\n  \"id\": any;\r\n  \"password\": string;\r\n  accessTokens: any[];\r\n  constructor(data?: UserInterface) {\r\n    Object.assign(this, data);\r\n  }\r\n  /**\r\n   * The name of the model represented by this $resource,\r\n   * i.e. `User`.\r\n   */\r\n  public static getModelName() {\r\n    return \"User\";\r\n  }\r\n  /**\r\n  * @method factory\r\n  * @author Jonathan Casarrubias\r\n  * @license MIT\r\n  * This method creates an instance of User for dynamic purposes.\r\n  **/\r\n  public static factory(data: UserInterface): User{\r\n    return new User(data);\r\n  }\r\n  /**\r\n  * @method getModelDefinition\r\n  * @author Julien Ledun\r\n  * @license MIT\r\n  * This method returns an object that represents some of the model\r\n  * definitions.\r\n  **/\r\n  public static getModelDefinition() {\r\n    return {\r\n      name: 'User',\r\n      plural: 'Users',\r\n      path: 'Users',\r\n      idName: 'id',\r\n      properties: {\r\n        \"realm\": {\r\n          name: 'realm',\r\n          type: 'string'\r\n        },\r\n        \"username\": {\r\n          name: 'username',\r\n          type: 'string'\r\n        },\r\n        \"email\": {\r\n          name: 'email',\r\n          type: 'string'\r\n        },\r\n        \"emailVerified\": {\r\n          name: 'emailVerified',\r\n          type: 'boolean'\r\n        },\r\n        \"id\": {\r\n          name: 'id',\r\n          type: 'any'\r\n        },\r\n        \"password\": {\r\n          name: 'password',\r\n          type: 'string'\r\n        },\r\n      },\r\n      relations: {\r\n        accessTokens: {\r\n          name: 'accessTokens',\r\n          type: 'any[]',\r\n          model: '',\r\n          relationType: 'hasMany',\r\n                  keyFrom: 'id',\r\n          keyTo: 'userId'\r\n        },\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-model-search',\n  template: `<form>\n  <div class=\"form-row\">\n    <div class=\"col-md-2 mb-3\">\n      <select name=\"property\" [(ngModel)]=\"property\" name=\"property\" class=\"form-control\">\n        <option selected value=\"any\">Any</option>\n        <option class=\"text-capitalize\" *ngFor=\"let item of properties\" [value]=\"item\">{{item}}</option>\n      </select>\n    </div>\n    <div class=\"col-md-8 mb-7\">\n      <input type=\"text\" class=\"form-control\" [placeholder]=\"property\" required [(ngModel)]=\"text\" name=\"text\">\n    </div>\n    <div class=\"col-md-2 mb-2\">\n      <button class=\"btn btn-primary form-control\" (click)=\"onSubmitted()\">Search</button>\n    </div>\n  </div>\n</form>\n`,\n  styles: [``]\n})\nexport class ModelSearchComponent implements OnInit {\n\n  @Input()\n  properties;\n\n  property = 'any';\n  text;\n\n  @Output()\n  submitted = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n\n  onSubmitted() {\n    if (this.property === 'any') {\n      this.searchAny();\n    }\n    else {\n      this.searchProperty();\n    }\n  }\n\n  searchProperty() {\n    this.submitted.emit({\n      property: this.property,\n      value: this.text\n    });\n  }\n\n  searchAny() {\n    this.submitted.emit({\n      property: this.property,\n      value: this.text,\n      properties: this.properties\n    });\n  }\n\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'capitalize'\n})\nexport class CapitalizePipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return value[0].toUpperCase() + value.slice(1, value.length);\n  }\n\n}\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-paginator',\n  template: `<nav aria-label=\"Page navigation example\">\n  {{1+(currentPage*limit)}}-{{getLastNumber()}} of {{totalCount}}\n  <ul class=\"pagination justify-content-end\">\n    <li class=\"page-item\" [class.disabled]=\"currentPage==0\">\n      <a class=\"page-link\" (click)=\"onPrev()\" tabindex=\"-1\">Previous</a>\n    </li>\n    \n    <li class=\"page-item\" [class.disabled]=\"isDisabled()\">\n      <a class=\"page-link\" (click)=\"onNext()\">Next</a>\n    </li>\n  </ul>\n</nav>\n`,\n  styles: [``]\n})\nexport class PaginatorComponent implements OnInit {\n\n\n  @Input()\n  totalCount = 0;\n\n  @Input()\n  limit = 15;\n\n  totalPages = 0;\n\n  @Input()\n  currentPage = 0;\n\n  @Output()\n  next = new EventEmitter<any>();\n\n  @Output()\n  prev = new EventEmitter<any>();\n\n  @Output()\n  pageSelected = new EventEmitter<any>();\n\n  constructor() { }\n\n  ngOnInit() {\n    this.totalPages = this.totalCount / this.limit;\n  }\n\n  onNext() {\n    this.currentPage += 1;\n    this.next.emit(this.currentPage);\n  }\n\n  onPrev() {\n    this.currentPage -= 1;\n    this.prev.emit(this.currentPage);\n  }\n\n  isDisabled(): boolean {\n    return (this.getLastNumber() >= this.totalCount);\n  }\n\n  getLastNumber() {\n    if (this.totalCount < this.limit) {\n      return this.totalCount;\n    }\n    return (this.currentPage * this.limit) + this.limit;\n  }\n\n}\n",
    "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\ninterface ModelProperty {\n  name: String;\n  type: String;\n}\n\n\n@Component({\n  selector: 'app-model-form',\n  template: `<div class=\"container\">\n  <ng-content select=\"[header]\"></ng-content>\n  <hr>\n\n  <form (ngSubmit)=\"submitted()\">\n    <ng-content select=\"[formTop]\"></ng-content>\n    <div class=\"form-group row\" *ngFor=\"let element of formProperties\">\n      <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">{{element.name}}</label>\n      <div class=\"col-sm-10\" [ngSwitch]=\"element.type\" *ngIf=\"element.name !='id'; else idInput\">\n        <input type=\"checkbox\" class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" *ngSwitchCase=\"'boolean'\">\n        <input type=\"email\" class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" *ngSwitchCase=\"'email'\">\n        <textarea class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" *ngSwitchCase=\"'textarea'\">\n        </textarea>\n        <div [froalaEditor] *ngSwitchCase=\"'rtext'\" [(froalaModel)]=\"item[element.name]\">\n          {{item[element.name]}}\n        </div>\n        <input type=\"text\" class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" *ngSwitchDefault>\n      </div>\n      <ng-template #idInput>\n        <div class=\"col-sm-10\">\n          <input type=\"text\" class=\"form-control\" [name]=\"element.name\" [(ngModel)]=\"item[element.name]\" readonly>\n        </div>\n      </ng-template>\n      <ng-content select=\"[form]\"></ng-content>\n    </div>\n    <div class=\"form-group row\">\n      <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n      <ng-content select=\"[buttons]\"></ng-content>\n    </div>\n  </form>\n</div>\n`,\n  styles: [``]\n})\nexport class ModelFormComponent implements OnInit {\n\n  private item;\n\n  @Input()\n  properties;\n\n  @Input()\n  public formProperties = [];\n\n  @Input()\n  private name;\n\n  @Output() onSubmit = new EventEmitter<any>();\n\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  @Input()\n  set model(item) {\n    this.item = item;\n    if (!this.formProperties || this.formProperties.length === 0) {\n      this.formProperties = [];\n      if (!this.properties || this.properties.length === 0) {\n        this.loadParamsFromModel();\n      } else {\n        this.loadParamsProperties();\n      }\n    }\n  }\n\n  loadParamsFromModel() {\n    const props = this.getProps();\n    for (var i in props) {\n      this.formProperties.push(props[i]);\n    }\n  }\n\n  loadParamsProperties() {\n    const props = this.getProps();\n    for (var i in props) {\n      if (this.properties.includes(i)) {\n        this.formProperties.push(props[i]);\n      }\n    }\n  }\n\n\n  getProps() {\n    return this.item.constructor.getModelDefinition().properties;\n  }\n\n  getType(element) {\n    return typeof (element);\n  }\n\n  submitted() {\n    this.onSubmit.emit(this.item);\n  }\n\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: '[app-api-row]',\n  template: `<td *ngFor=\"let prop of tableProperties\" >\n\n  <div [ngSwitch]=\"prop.name.toLowerCase()\">\n    <span *ngSwitchCase=\"'date'\">\n      {{rowItem[prop.name] | date}}\n    </span>\n\n    <span *ngSwitchDefault>\n      {{rowItem[prop.name]}}\n    </span>\n  </div>\n</td>\n\n<td>\n\n</td>\n`,\n  styles: [``]\n})\nexport class ApiRowComponent implements OnInit {\n\n  @Input()\n  rowItem;\n\n  @Input()\n  tableProperties;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
    "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-api-table',\r\n  template: `<table class=\"table table-hover table-sm\">\r\n  <thead>\r\n    <tr>\r\n      <th *ngFor=\"let item of tableProperties\" class=\"text-capitalize\" scope=\"col\"> {{item.name}}</th>\r\n    </tr>\r\n  </thead>\r\n\r\n  <tbody>\r\n    <tr [routerLink]=\"[route, item.id]\" app-api-row *ngFor=\"let item of tableItems\" [rowItem]=\"item\" [tableProperties]=\"tableProperties\">\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class ApiTableComponent implements OnInit {\r\n\r\n  @Input()\r\n  tableItems: [any];\r\n\r\n  tableModel;\r\n\r\n  @Input()\r\n  properties;\r\n\r\n  tableProperties = [];\r\n\r\n  @Input()\r\n  route;\r\n\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.tableModel = this.tableItems ? this.tableItems[0] : {};\r\n    if (!this.properties) {\r\n      this.readPropertiesDefault();\r\n    } else {\r\n      this.readArrProperties();\r\n    }\r\n  }\r\n\r\n\r\n  readArrProperties() {\r\n    const props = this.getProps();\r\n    for (var i in props) {\r\n      if (this.properties.includes(i)) {\r\n        this.tableProperties.push(props[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  getProps() {\r\n    return this.tableModel.constructor.getModelDefinition().properties;\r\n  }\r\n\r\n\r\n  readPropertiesDefault() {\r\n    this.tableProperties = [];\r\n    const props = this.getProps();\r\n    for (var i in props) {\r\n      this.tableProperties.push(props[i]);\r\n    }\r\n  }\r\n\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
